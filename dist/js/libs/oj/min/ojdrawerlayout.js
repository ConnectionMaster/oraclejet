/**
 * @license
 * Copyright (c) 2014, 2022, Oracle and/or its affiliates.
 * Licensed under The Universal Permissive License (UPL), Version 1.0
 * as shown at https://oss.oracle.com/licenses/upl/
 * @ignore
 */
define(["exports","ojs/ojvcomponent","preact","jquery","ojs/ojanimation","ojs/ojdomutils","ojs/ojcore-base","ojs/ojpopup","ojs/ojdrawerutils"],function(e,t,s,r,a,n,i,o,l){"use strict";r=r&&Object.prototype.hasOwnProperty.call(r,"default")?r.default:r;var d,h=function(e,t,s,r){var a,n=arguments.length,i=n<3?t:null===r?r=Object.getOwnPropertyDescriptor(t,s):r;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)i=Reflect.decorate(e,t,s,r);else for(var o=e.length-1;o>=0;o--)(a=e[o])&&(i=(n<3?a(i):n>3?a(t,s,i):a(t,s))||i);return n>3&&i&&Object.defineProperty(t,s,i),i};const p=oj,D=p.PopupService,w=p.ZOrderUtils;e.DrawerLayout=d=class extends s.Component{constructor(){super(...arguments),this.rootRef=s.createRef(),this.startWrapperRef=s.createRef(),this.startRef=s.createRef(),this.endWrapperRef=s.createRef(),this.endRef=s.createRef(),this.mainSectionRef=s.createRef(),this.startClosedWithEsc=!1,this.endClosedWithEsc=!1,this.drawerResizeHandler=null,this.handleResize=!0,this.state={startOpened:this.props.startOpened,endOpened:this.props.endOpened,startDisplay:this.props.startDisplay,endDisplay:this.props.endDisplay,startShouldChangeDisplayMode:!1,endShouldChangeDisplayMode:!1,startStateToChangeTo:null,endStateToChangeTo:null,viewportResolvedDisplayMode:this.getViewportResolvedDisplayMode(),lastlyOpenedDrawer:l.DrawerConstants.stringStart},this.handleKeyDown=(e,t)=>{const s=this.getDrawerResolvedDisplayMode(e);t.key!==l.DrawerConstants.keys.ESC||s!==l.DrawerConstants.stringOverlay&&s!==l.DrawerConstants.stringFullOverlay||(this[this.edgeToClosedWithEsc(e)]=!0,this.selfClose(e))},this.getRefToAnimate=e=>this.getDrawerResolvedDisplayMode(e)===l.DrawerConstants.stringReflow?this.getDrawerWrapperRef(e):this.getDrawerRef(e),this.lockResizeListener=()=>{this.handleResize&&(this.handleResize=!1,setTimeout(()=>{if(this.handleResize=!0,this.state.viewportResolvedDisplayMode!==this.getViewportResolvedDisplayMode()){const e={};[l.DrawerConstants.stringStart,l.DrawerConstants.stringEnd].forEach(t=>{this.isDrawerOpened(t)&&"auto"===this.state[this.edgeToDisplayName(t)]&&(e[this.edgeToShouldChangeDisplayMode(t)]=!0)}),Object.keys(e).length>0&&this.setState(e)}},l.DrawerConstants.animationDuration+50))},this.resizeHandler=()=>{if(this.handleResize){const e=this.state.viewportResolvedDisplayMode,t=this.getViewportResolvedDisplayMode();let s=!1;const r={};e!==t&&(this.lockResizeListener(),[l.DrawerConstants.stringStart,l.DrawerConstants.stringEnd].forEach(e=>{this.isDrawerOpened(e)&&"auto"===this.state[this.edgeToDisplayName(e)]&&(s=!0,r[this.edgeToShouldChangeDisplayMode(e)]=!0)}),!1===s&&(r.viewportResolvedDisplayMode=t)),Object.keys(r).length>0&&this.setState(r)}}}static getDerivedStateFromProps(e,t){const s={};if(t.startOpened&&e.startDisplay!==t.startDisplay)return s[`${l.DrawerConstants.stringStart}${l.DrawerConstants.stringStateToChangeTo}`]={startDisplay:e.startDisplay},s;const r=`${l.DrawerConstants.stringEnd}${l.DrawerConstants.stringStateToChangeTo}`;return t.endOpened&&null===t[r]&&e.endDisplay!==t.endDisplay?(s[r]={endDisplay:e.endDisplay},s):(e.startOpened!==t.startOpened&&(s.startOpened=e.startOpened,e.startOpened&&(s.lastlyOpenedDrawer=l.DrawerConstants.stringStart)),e.endOpened!==t.endOpened&&(s.endOpened=e.endOpened,e.endOpened&&(s.lastlyOpenedDrawer=l.DrawerConstants.stringEnd)),e.startDisplay!==t.startDisplay&&(s.startDisplay=e.startDisplay),e.endDisplay!==t.endDisplay&&(s.endDisplay=e.endDisplay),0===Object.keys(s).length?null:s)}render(e){let r=this.getDrawer(l.DrawerConstants.stringStart),a=this.getDrawer(l.DrawerConstants.stringEnd);return s.h(t.Root,{ref:this.rootRef},r,s.h("div",{ref:this.mainSectionRef,class:l.DrawerConstants.mainContentSelector},e.children),a)}getDrawer(e){const t=this.getDrawerResolvedDisplayMode(e),r=t===l.DrawerConstants.stringOverlay||t===l.DrawerConstants.stringFullOverlay,a=this.props.role||r&&"dialog",n=r?-1:void 0;return this.isDrawerOpened(e)||this.wasDrawerOpenedInPrevState(e)||this.wasDrawerClosedWithEsc(e)?s.h("div",{ref:this.getDrawerWrapperRef(e),class:this.getDrawerWrapperStyleClasses(e)},s.h("div",{ref:this.getDrawerRef(e),role:a,tabIndex:n,class:this.getDrawerStyleClasses(e),onKeyDown:t=>this.handleKeyDown(e,t)},this.getDrawerContent(e))):null}isDrawerOpened(e){return this.state[this.edgeToStateOpenedName(e)]}wasDrawerOpenedInPrevState(e){return this[this.edgeToPrevStateOpenedName(e)]}wasDrawerClosedWithEsc(e){return this[this.edgeToClosedWithEsc(e)]}getDrawerWrapperRef(e){return e===l.DrawerConstants.stringStart?this.startWrapperRef:this.endWrapperRef}getDrawerRef(e){return e===l.DrawerConstants.stringStart?this.startRef:this.endRef}getDrawerContent(e){return e===l.DrawerConstants.stringStart?this.props.start:this.props.end}getDrawerWrapperStyleClasses(e){return`${l.DrawerConstants.stringOjDrawer}${l.DrawerConstants.charDash}${l.DrawerConstants.stringReflow}-wrapper `+this.getDrawerStyleClasses(e)}getDrawerStyleClasses(e){let t;switch(this.getDrawerResolvedDisplayMode(e)){case l.DrawerConstants.stringReflow:t={[l.DrawerConstants.styleDisplayMode(l.DrawerConstants.stringReflow)]:!0};break;case l.DrawerConstants.stringOverlay:t={[l.DrawerConstants.styleDisplayMode(l.DrawerConstants.stringOverlay)]:!0};break;case l.DrawerConstants.stringFullOverlay:t={[l.DrawerConstants.styleDisplayMode(l.DrawerConstants.stringOverlay)]:!0,[l.DrawerConstants.styleDisplayMode(l.DrawerConstants.stringFullOverlay)]:!0}}return l.DrawerUtils.getStyleClassesMapAsString(Object.assign(t,l.DrawerUtils.getCommonStyleClasses(e)))}getDrawerResolvedDisplayMode(e){const t=this.edgeToDisplayName(e);return"auto"===this.state[t]?this.state.viewportResolvedDisplayMode:this.state[t]===l.DrawerConstants.stringReflow?l.DrawerConstants.stringReflow:this.state[t]===l.DrawerConstants.stringOverlay?this.state.viewportResolvedDisplayMode===l.DrawerConstants.stringFullOverlay?l.DrawerConstants.stringFullOverlay:l.DrawerConstants.stringOverlay:void 0}getViewportResolvedDisplayMode(){const e=l.DrawerUtils.getViewportWidth();return e>=l.DrawerConstants.displayTypeChangeThreshold?l.DrawerConstants.stringReflow:e<l.DrawerConstants.displayTypeChangeThreshold&&e>=l.DrawerConstants.fullWidthDrawerChangeThreshold?l.DrawerConstants.stringOverlay:l.DrawerConstants.stringFullOverlay}selfClose(e){var t,s,r,a;e===l.DrawerConstants.stringStart&&(null===(s=(t=this.props).onStartOpenedChanged)||void 0===s||s.call(t,!1)),e===l.DrawerConstants.stringEnd&&(null===(a=(r=this.props).onEndOpenedChanged)||void 0===a||a.call(r,!1))}setDrawerFocus(e){const t=this.getDrawerRef(e),s=t.current.querySelectorAll("[autofocus]"),{length:r,0:a}=s;if(r>0)return void a.focus();const n=t.current.querySelectorAll('button, [href], input, select, textarea, [tabindex]:not([tabindex="-1"]), video');let i=t.current;if(n.length)for(let e=0;e<n.length;e++)if(!0!==n[e].disabled){i=n[e];break}i.focus()}componentDidUpdate(e,t){this.handleComponentUpdate(t)}componentDidMount(){if(this.startOpenedPrevState=this.props.startOpened,this.endOpenedPrevState=this.props.endOpened,window.addEventListener(l.DrawerConstants.stringResize,()=>{this.resizeHandler()}),d.defaultProps.startOpened!=this.props.startOpened||d.defaultProps.endOpened!=this.props.endOpened){const e=Object.assign({},this.state);e.startOpened=!1,e.endOpened=!1,this.handleComponentUpdate(e)}}componentWillUnmount(){window.removeEventListener(l.DrawerConstants.stringResize,()=>{this.resizeHandler()})}handleComponentUpdate(e){const t=this.state.lastlyOpenedDrawer===l.DrawerConstants.stringStart?l.DrawerConstants.stringEnd:l.DrawerConstants.stringStart;this.openOrCloseDrawer(t,e),this.openOrCloseDrawer(this.state.lastlyOpenedDrawer,e)}openOrCloseDrawer(e,t){const s=this.edgeToStateOpenedName(e);if(this.isDrawerOpened(e)!=t[s]||this.shouldDrawerChangeDisplayMode(e)||this.isDrawerOpened(e)&&t[s]){this.isDrawerOpened(e)!=t[s]&&(this[this.edgeToPrevStateOpenedName(e)]=this.isDrawerOpened(e));this.getDrawerResolvedDisplayMode(e)===l.DrawerConstants.stringReflow?this.openOrCloseReflowDrawer(e,t):this.openOrClosePopupDrawer(e,t)}}openOrCloseReflowDrawer(e,t){!1===this.isDrawerOpened(e)||this.shouldDrawerChangeDisplayMode(e)||this.getStateToChangeTo(e)?this.animateClose(e).then(()=>{if(this.getStateToChangeTo(e)){const t={},s={};s[this.edgeToStateToChangeTo(e)]=null,Object.assign(t,this.getStateToChangeTo(e),s),this.setState(t)}else if(this.shouldDrawerChangeDisplayMode(e)){const t={};t[this.edgeToShouldChangeDisplayMode(e)]=!1,t.viewportResolvedDisplayMode=this.getViewportResolvedDisplayMode(),this.setState(t)}else this.wasDrawerOpenedInPrevState(e)||this.forceUpdate()}):this.isDrawerOpened(e)&&(!1===t[this.edgeToStateOpenedName(e)]||t[this.edgeToShouldChangeDisplayMode(e)]||t[this.edgeToDisplayName(e)]!=this.state[this.edgeToDisplayName(e)])&&this.animateOpen(e)}animateOpen(e){return this.getDrawerResolvedDisplayMode(e)===l.DrawerConstants.stringReflow?a.expand(this.getRefToAnimate(e).current,l.DrawerUtils.getAnimationOptions("expand",e)):a.slideIn(this.getRefToAnimate(e).current,l.DrawerUtils.getAnimationOptions(l.DrawerConstants.stringSlideIn,e))}animateClose(e){return this.getDrawerResolvedDisplayMode(e)===l.DrawerConstants.stringReflow?a.collapse(this.getRefToAnimate(e).current,l.DrawerUtils.getAnimationOptions("collapse",e)):a.slideOut(this.getRefToAnimate(e).current,l.DrawerUtils.getAnimationOptions(l.DrawerConstants.stringSlideOut,e))}edgeToStateOpenedName(e){return`${e}${l.DrawerUtils.capitalizeFirstChar(l.DrawerConstants.stringOpened)}`}edgeToPrevStateOpenedName(e){return`${e}${l.DrawerUtils.capitalizeFirstChar(l.DrawerConstants.stringOpened)}${l.DrawerConstants.stringPrevState}`}edgeToShouldChangeDisplayMode(e){return`${e}${l.DrawerConstants.stringShouldChangeDisplayMode}`}edgeToClosedWithEsc(e){return`${e}${l.DrawerConstants.stringClosedWithEsc}`}edgeToDisplayName(e){return`${e}${l.DrawerConstants.stringDisplay}`}edgeToStateToChangeTo(e){return`${e}${l.DrawerConstants.stringStateToChangeTo}`}openOrClosePopupDrawer(e,t){const s=r(this.getDrawerRef(e).current),a=D.getInstance(),n=this.getPopupServiceOptions(e,t);!1===this.isDrawerOpened(e)||this.shouldDrawerChangeDisplayMode(e)||this.getStateToChangeTo(e)?w.getStatus(s)===w.STATUS.OPEN&&a.close(n):this.isDrawerOpened(e)&&[w.STATUS.CLOSE,w.STATUS.UNKNOWN].indexOf(w.getStatus(s)>-1)&&a.open(n)}shouldDrawerChangeDisplayMode(e){return this.state[this.edgeToShouldChangeDisplayMode(e)]}getStateToChangeTo(e){return this.state[this.edgeToStateToChangeTo(e)]}getPopupServiceOptions(e,t){const s=r(this.getDrawerRef(e).current),a={},n=D.OPTION;a[n.POPUP]=s,a[n.LAUNCHER]=r(document.activeElement),a[n.LAYER_SELECTORS]=l.DrawerConstants.DrawerLayoutStyleSurrogate,a[n.LAYER_LEVEL]=D.LAYER_LEVEL.TOP_LEVEL,a[n.POSITION]=this.getDrawerPosition(e);const i=D.EVENT;return a[n.EVENTS]={[i.POPUP_BEFORE_OPEN]:()=>this.beforeOpenHandler(e,a),[i.POPUP_AFTER_OPEN]:()=>this.afterOpenHandler(e,t),[i.POPUP_BEFORE_CLOSE]:()=>this.beforeCloseHandler(e),[i.POPUP_AFTER_CLOSE]:()=>this.afterCloseHandler(e,t),[i.POPUP_REFRESH]:()=>{s.position(this.getDrawerPosition(e)),this.setOverlayDrawersHeight()}},a}beforeOpenHandler(e,t){l.DrawerUtils.disableBodyOverflow();const s=t[D.OPTION.POPUP],r=t[D.OPTION.POSITION];return s.show(),s.position(r),this.setOverlayDrawersHeight(),this.animateOpen(e)}afterOpenHandler(e,t){l.DrawerUtils.enableBodyOverflow(),this.handleFocus(t);const s=r(this.getDrawerRef(e).current),a=w.getStatus(s);if(null===this.drawerResizeHandler&&(this.drawerResizeHandler=this.drawerResizeCallback.bind(this,s,e)),n.addResizeListener(this.getDrawerRef(e).current,this.drawerResizeHandler,0,!0),a===w.STATUS.OPEN&&!this.isDrawerOpened(e)){const s=D.getInstance(),r=this.getPopupServiceOptions(e,t);s.close(r)}}drawerResizeCallback(e,t){e.position(this.getDrawerPosition(t))}handleFocus(e){this.state.startOpened&&e.startOpened!==this.state.startOpened&&this.setDrawerFocus(l.DrawerConstants.stringStart),this.state.endOpened&&e.endOpened!==this.state.endOpened&&this.setDrawerFocus(l.DrawerConstants.stringEnd)}beforeCloseHandler(e){return l.DrawerUtils.disableBodyOverflow(),n.removeResizeListener(this.rootRef.current,this.drawerResizeHandler),this.animateClose(e)}afterCloseHandler(e,t){this[this.edgeToClosedWithEsc(e)]&&(this[this.edgeToClosedWithEsc(e)]=!1),l.DrawerUtils.enableBodyOverflow();const s=r(this.getDrawerRef(e).current),a=w.getStatus(s);if(this.getDrawerRef(e).current&&this.getDrawerRef(e).current.removeAttribute("style"),this.getStateToChangeTo(e)){const t={},s={};s[this.edgeToStateToChangeTo(e)]=null,Object.assign(t,this.getStateToChangeTo(e),s),this.setState(t)}else if(this.shouldDrawerChangeDisplayMode(e)){const t={};t[this.edgeToShouldChangeDisplayMode(e)]=!1,t.viewportResolvedDisplayMode=this.getViewportResolvedDisplayMode(),this.setState(t)}else if(a===w.STATUS.CLOSE&&this.isDrawerOpened(e)){const s=D.getInstance(),r=this.getPopupServiceOptions(e,t);s.open(r)}else this.wasDrawerOpenedInPrevState(e)||this.forceUpdate()}getDrawerPosition(e){const t=e+" top";let s={my:t,at:t,of:this.rootRef.current,collision:"none"};return oj.PositionUtils.normalizeHorizontalAlignment(s,l.DrawerUtils.isRTL())}setOverlayDrawersHeight(){const e=l.DrawerUtils.getElementHeight(this.mainSectionRef.current)+"px",t=this.startRef.current;t&&(t.style.height=e);const s=this.endRef.current;s&&(s.style.height=e)}},e.DrawerLayout.defaultProps={startOpened:!1,endOpened:!1,startDisplay:"auto",endDisplay:"auto"},e.DrawerLayout.metadata={slots:{"":{},start:{},end:{}},properties:{startOpened:{type:"boolean",writeback:!0},endOpened:{type:"boolean",writeback:!0},startDisplay:{type:"string",enumValues:["reflow","overlay","auto"]},endDisplay:{type:"string",enumValues:["reflow","overlay","auto"]}},extension:{_WRITEBACK_PROPS:["startOpened","endOpened"],_READ_ONLY_PROPS:[],_OBSERVED_GLOBAL_PROPS:["role"]}},e.DrawerLayout=d=h([t.customElement("oj-drawer-layout")],e.DrawerLayout),Object.defineProperty(e,"__esModule",{value:!0})});
//# sourceMappingURL=ojdrawerlayout.js.map
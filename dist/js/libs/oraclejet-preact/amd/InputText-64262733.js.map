{"version":3,"file":"InputText-64262733.js","sources":["../../src/UNSAFE_InputText/InputText.tsx"],"sourcesContent":["/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\n\nimport { ComponentProps, Fragment, Ref } from 'preact';\nimport { forwardRef } from 'preact/compat';\nimport { useCallback } from 'preact/hooks';\nimport { useClearIcon } from '../hooks/UNSAFE_useClearIcon';\nimport { FocusableHandle, useFocusableTextField } from '../hooks/UNSAFE_useFocusableTextField';\nimport { useFormContext } from '../hooks/UNSAFE_useFormContext';\nimport { FormFieldContext } from '../hooks/UNSAFE_useFormFieldContext';\nimport { useHover } from '../hooks/UNSAFE_useHover';\nimport { CountUnit, useLengthFilter } from '../hooks/UNSAFE_useLengthFilter';\nimport { useTextField } from '../hooks/UNSAFE_useTextField';\nimport { Label } from '../UNSAFE_Label';\nimport {\n  ReadonlyTextField,\n  ReadonlyTextFieldInput,\n  TextField,\n  TextFieldInput\n} from '../UNSAFE_TextField';\nimport { InlineUserAssistance } from '../UNSAFE_UserAssistance';\nimport { getClientHints } from '../utils/PRIVATE_clientHints';\nimport { beforeVNode } from '../utils/UNSAFE_componentUtils';\nimport { ClearIcon } from './ClearIcon';\nimport { MaxLengthLiveRegion } from '../UNSAFE_TextField';\nimport { Size } from '../utils/UNSAFE_size';\nimport { ValueUpdateDetail } from '../utils/UNSAFE_valueUpdateDetail';\nimport { useCurrentValueReducer } from '../hooks/UNSAFE_useCurrentValueReducer';\n\ntype PickedPropsFromTextField = Pick<\n  ComponentProps<typeof TextField>,\n  'id' | 'startContent' | 'endContent'\n>;\n\ntype PickedPropsFromTextFieldInput = Pick<\n  ComponentProps<typeof TextFieldInput>,\n  | 'autoComplete'\n  | 'autoFocus'\n  | 'placeholder'\n  | 'isRequired'\n  | 'role'\n  | 'textAlign'\n  | 'value'\n  | 'onInput'\n  | 'onCommit'\n>;\n\ntype PickedPropsFromInlineUserAssistance = Pick<\n  ComponentProps<typeof InlineUserAssistance>,\n  | 'assistiveText'\n  | 'helpSourceLink'\n  | 'helpSourceText'\n  | 'isRequiredShown'\n  | 'messages'\n  | 'userAssistanceDensity'\n>;\n\ntype Props = PickedPropsFromTextField &\n  PickedPropsFromTextFieldInput &\n  PickedPropsFromInlineUserAssistance & {\n    hasClearIcon?: 'always' | 'conditionally' | 'never';\n    isDisabled?: boolean;\n    isReadonly?: boolean;\n    label: string;\n    labelEdge?: 'inside' | 'start' | 'top' | 'none';\n    labelStartWidth?: Size;\n    maxLength?: number;\n    maxLengthUnit?: CountUnit;\n    virtualKeyboard?: 'auto' | 'email' | 'number' | 'search' | 'tel' | 'text' | 'url';\n  };\n\n/**\n * Helper function to determine whether the current device is a mobile device\n * @returns true if runnning on a mobile device, false otherwise\n */\nfunction isMobile() {\n  const deviceType = getClientHints().deviceType;\n  return deviceType === 'phone' || deviceType === 'tablet';\n}\n\nexport const InputText = forwardRef(\n  (\n    {\n      assistiveText,\n      autoComplete = 'off',\n      autoFocus = false,\n      hasClearIcon,\n      endContent,\n      helpSourceLink,\n      helpSourceText,\n      id,\n      isDisabled: propIsDisabled,\n      isReadonly: propIsReadonly,\n      isRequired = false,\n      isRequiredShown,\n      label,\n      labelEdge: propLabelEdge,\n      labelStartWidth: propLabelStartWidth,\n      maxLength,\n      maxLengthUnit,\n      messages,\n      placeholder,\n      role,\n      startContent,\n      textAlign: propTextAlign,\n      userAssistanceDensity: propUserAssistanceDensity,\n      value,\n      virtualKeyboard,\n      onInput,\n      onCommit\n    }: Props,\n    ref?: Ref<FocusableHandle>\n  ) => {\n    const { currentCommitValue, dispatch } = useCurrentValueReducer({ value });\n    const onInputAndDispatch = useCallback(\n      (detail: ValueUpdateDetail<string>) => {\n        // Should dispatch happen first? This will queue up a re-render, ordering should not cause issues (this is async)\n        dispatch({ type: 'input', payload: detail.value });\n        onInput?.(detail);\n      },\n      [onInput]\n    );\n    const onCommitAndDispatch = useCallback(\n      (detail: ValueUpdateDetail<string>) => {\n        // Should dispatch happen first? This will queue up a re-render, ordering should not cause issues (this is async)\n        dispatch({ type: 'commit', payload: detail.value });\n        onCommit?.(detail);\n      },\n      [onCommit]\n    );\n    const {\n      isDisabled: isFormDisabled,\n      isReadonly: isFormReadonly,\n      labelEdge: formLabelEdge,\n      labelStartWidth: formLabelStartWidth,\n      textAlign: formTextAlign,\n      userAssistanceDensity: formUserAssistanceDensity\n    } = useFormContext();\n    // default to FormContext values if component properties are not specified\n    const isDisabled = propIsDisabled ?? isFormDisabled;\n    const isReadonly = propIsReadonly ?? isFormReadonly;\n    const labelEdge = propLabelEdge ?? formLabelEdge;\n    const labelStartWidth = propLabelStartWidth ?? formLabelStartWidth;\n    const textAlign = propTextAlign ?? formTextAlign;\n    const userAssistanceDensity = propUserAssistanceDensity ?? formUserAssistanceDensity;\n\n    const { enabledElementRef, focusProps, isFocused, readonlyElementRef } = useFocusableTextField<\n      HTMLInputElement,\n      HTMLDivElement\n    >({ isDisabled, isReadonly, ref });\n    const { hoverProps, isHover } = useHover({ isDisabled: isReadonly || isDisabled || false });\n\n    const { formFieldContext, inputProps, labelProps, textFieldProps, userAssistanceProps } =\n      useTextField({\n        id,\n        isDisabled,\n        isFocused,\n        isReadonly,\n        labelEdge,\n        messages,\n        value\n      });\n\n    const onClickClearIcon = useCallback(() => {\n      // Clicking the clear icon should put the focus on the input field\n      enabledElementRef.current?.focus();\n      // Send an event to clear the field's value\n      onInputAndDispatch?.({ previousValue: value, value: '' });\n    }, [onInputAndDispatch, value]);\n\n    const maybeClearIcon = useClearIcon({\n      clearIcon: <ClearIcon onClick={onClickClearIcon} />,\n      display: hasClearIcon,\n      hasValue: formFieldContext.hasValue,\n      isFocused,\n      isEnabled: !isReadonly && !isDisabled,\n      isHover\n    });\n    const endContentCombined = beforeVNode(endContent, maybeClearIcon);\n\n    const { isMaxLengthExceeded, valueLength, onFilteredInput } = useLengthFilter({\n      maxLength,\n      maxLengthUnit,\n      value,\n      onInput: onInputAndDispatch,\n      onCommit: onCommitAndDispatch\n    });\n\n    const labelComp = labelEdge !== 'none' ? <Label {...labelProps}>{label}</Label> : undefined;\n\n    const fieldLabelProps = {\n      label: labelEdge !== 'none' ? labelComp : undefined,\n      labelEdge: labelEdge !== 'none' ? labelEdge : undefined,\n      labelStartWidth: labelEdge !== 'none' ? labelStartWidth : undefined\n    };\n\n    const ariaLabel = labelEdge === 'none' ? label : undefined;\n\n    const inlineUserAssistance =\n      isDisabled || isReadonly ? (\n        // save space for user assistance if density is 'efficient', even though we don't\n        // render user assistance for disabled or readonly fields\n        userAssistanceDensity !== 'efficient' ? undefined : (\n          <InlineUserAssistance\n            userAssistanceDensity={userAssistanceDensity}\n            {...userAssistanceProps}\n          />\n        )\n      ) : (\n        <InlineUserAssistance\n          assistiveText={assistiveText}\n          fieldLabel={label}\n          helpSourceLink={helpSourceLink}\n          helpSourceText={helpSourceText}\n          messages={messages}\n          isRequiredShown={isRequiredShown}\n          userAssistanceDensity={userAssistanceDensity}\n          {...userAssistanceProps}\n        />\n      );\n\n    if (isReadonly) {\n      // TODO: should be able to configure whether start/end content is shown when readonly\n      // JET-49916 - Preact InputText: show start/end content when readonly\n      return (\n        <FormFieldContext.Provider value={formFieldContext}>\n          <ReadonlyTextField\n            role=\"presentation\"\n            inlineUserAssistance={inlineUserAssistance}\n            onBlur={focusProps.onfocusout}\n            onFocus={focusProps.onfocusin}\n            {...fieldLabelProps}>\n            <ReadonlyTextFieldInput\n              ariaLabel={ariaLabel}\n              ariaLabelledby={labelProps.id}\n              as=\"div\"\n              autoFocus={autoFocus}\n              elementRef={readonlyElementRef}\n              id={textFieldProps.id}\n              textAlign={textAlign}\n              value={value}\n              hasInsideLabel={label !== undefined && labelEdge === 'inside'}\n            />\n          </ReadonlyTextField>\n        </FormFieldContext.Provider>\n      );\n    }\n\n    const mainContent = (\n      <Fragment>\n        <TextFieldInput\n          ariaLabel={ariaLabel}\n          autoComplete={autoComplete}\n          autoFocus={autoFocus}\n          currentCommitValue={currentCommitValue}\n          hasInsideLabel={labelComp !== undefined && labelEdge === 'inside'}\n          inputRef={enabledElementRef}\n          isRequired={isRequired}\n          placeholder={placeholder}\n          role={role}\n          textAlign={textAlign}\n          type={isMobile() ? virtualKeyboard : undefined}\n          value={value}\n          onCommit={onCommitAndDispatch}\n          onInput={onFilteredInput}\n          {...inputProps}\n        />\n        {maxLength !== undefined && (\n          <MaxLengthLiveRegion {...{ isMaxLengthExceeded, maxLength, valueLength }} />\n        )}\n      </Fragment>\n    );\n\n    return (\n      <FormFieldContext.Provider value={formFieldContext}>\n        <TextField\n          endContent={endContentCombined}\n          inlineUserAssistance={inlineUserAssistance}\n          mainContent={mainContent}\n          onBlur={focusProps.onfocusout}\n          onFocus={focusProps.onfocusin}\n          startContent={startContent}\n          {...textFieldProps}\n          {...fieldLabelProps}\n          {...hoverProps}\n        />\n      </FormFieldContext.Provider>\n    );\n  }\n);\n"],"names":["isMobile","deviceType","getClientHints","InputText","forwardRef","assistiveText","autoComplete","autoFocus","hasClearIcon","endContent","helpSourceLink","helpSourceText","id","isDisabled","propIsDisabled","isReadonly","propIsReadonly","isRequired","isRequiredShown","label","labelEdge","propLabelEdge","labelStartWidth","propLabelStartWidth","maxLength","maxLengthUnit","messages","placeholder","role","startContent","textAlign","propTextAlign","userAssistanceDensity","propUserAssistanceDensity","value","virtualKeyboard","onInput","onCommit","ref","currentCommitValue","dispatch","useCurrentValueReducer","onInputAndDispatch","useCallback","detail","type","payload","onCommitAndDispatch","isFormDisabled","isFormReadonly","formLabelEdge","formLabelStartWidth","formTextAlign","formUserAssistanceDensity","useFormContext","enabledElementRef","focusProps","isFocused","readonlyElementRef","useFocusableTextField","hoverProps","isHover","useHover","formFieldContext","inputProps","labelProps","textFieldProps","userAssistanceProps","useTextField","onClickClearIcon","_a","current","focus","previousValue","maybeClearIcon","useClearIcon","clearIcon","_jsx","ClearIcon","onClick","display","hasValue","isEnabled","endContentCombined","beforeVNode","isMaxLengthExceeded","valueLength","onFilteredInput","useLengthFilter","labelComp","Label","Object","assign","undefined","fieldLabelProps","ariaLabel","inlineUserAssistance","jsx","InlineUserAssistance","fieldLabel","FormFieldContext","Provider","children","ReadonlyTextField","onBlur","onfocusout","onFocus","onfocusin","ReadonlyTextFieldInput","ariaLabelledby","as","elementRef","hasInsideLabel","mainContent","_jsxs","jsxs","Fragment","TextFieldInput","inputRef","MaxLengthLiveRegion","TextField"],"mappings":"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"}
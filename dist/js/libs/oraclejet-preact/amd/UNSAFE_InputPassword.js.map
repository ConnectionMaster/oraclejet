{"version":3,"file":"UNSAFE_InputPassword.js","sources":["../../src/UNSAFE_InputPassword/RevealToggleIcon.tsx","../../src/UNSAFE_InputPassword/InputPassword.tsx"],"sourcesContent":["import { cssProps } from '@oracle/oraclejet-cssprops';\nimport { useTranslationBundle } from '../hooks/UNSAFE_useTranslationBundle';\nimport { BundleType } from '../resources/nls/bundle';\nimport { usePress } from '../hooks/UNSAFE_usePress';\nimport { ViewHideIcon, ViewIcon } from '../UNSAFE_ThemedIcons';\n\ntype RevealToogleIconProps = {\n  onPress: (event: Event) => void;\n  isRevealed?: boolean;\n};\n\n// TODO: This was copied from ClearIcon. When we have a preact <Button> component we\n// will need to refactor to use that.\n// TODO: replace this with var(--oj-c-PRIVATE-DO-NOT-USE-button-height) once it is available\nconst ojButtonHeight = '2.75rem';\n// TODO: replace this with var(--oj-c-PRIVATE-DO-NOT-USE-button-border-radius) once it is available\nconst ojButtonBorderRadius = 'var(--oj-c-PRIVATE-DO-NOT-USE-core-border-radius-md)';\n// TODO: replace this with var(--oj-c-PRIVATE-DO-NOT-USE-button-borderless-chrome-text-color) once it is available\nconst ojButtonBorderlessChromeTextColor = 'var(--oj-c-PRIVATE-DO-NOT-USE-core-text-color-primary)';\n// TODO: replace this with var(--oj-c-PRIVATE-DO-NOT-USE-button-borderless-chrome-text-color-hover) once it is available\nconst ojButtonBorderlessChromeTextColorHover =\n  'var(--oj-c-PRIVATE-DO-NOT-USE-core-text-color-primary)';\n// TODO: replace this with var(--oj-c-PRIVATE-DO-NOT-USE-button-borderless-chrome-bg-color-hover) once it is available\nconst ojButtonBorderlessChromeBgColorHover = 'var(--oj-c-PRIVATE-DO-NOT-USE-core-bg-color-hover)';\n// TODO: replace this with var(--oj-c-PRIVATE-DO-NOT-USE-button-borderless-chrome-border-color-hover) once it is available\nconst ojButtonBorderlessChromeBorderColorHover = 'transparent';\n// TODO: replace this with var(--oj-c-PRIVATE-DO-NOT-USE-button-icon-size) once it is available\nconst ojButtonIconSize = 'var(--oj-c-PRIVATE-DO-NOT-USE-core-icon-size-lg)';\n\nconst revealToggleIconStyles = {\n  base: cssProps`${{\n    display: 'inline-flex',\n    alignItems: 'center',\n    justifyContent: 'center',\n    cursor: 'var(--oj-c-PRIVATE-DO-NOT-USE-core-cursor-clickable)',\n\n    paddingInline: 0,\n    paddingBlock: 0,\n    borderRadius: ojButtonBorderRadius,\n    color: ojButtonBorderlessChromeTextColor,\n    borderColor: 'transparent',\n    backgroundColor: 'transparent',\n\n    width: ojButtonHeight,\n    height: ojButtonHeight,\n    lineHeight: ojButtonHeight,\n    fontSize: ojButtonIconSize,\n\n    '&:hover': {\n      color: ojButtonBorderlessChromeTextColorHover,\n      backgroundColor: ojButtonBorderlessChromeBgColorHover,\n      borderColor: ojButtonBorderlessChromeBorderColorHover\n    }\n  }}`\n};\n\nexport function RevealToggleIcon({ isRevealed, onPress }: RevealToogleIconProps) {\n  const { pressProps } = usePress(onPress);\n  const translations = useTranslationBundle<BundleType>('@oracle/oraclejet-preact');\n  // title attribute. We removed these because title is taking precedence over aria-label and this\n  // is messing up the screen readers. To be accessible we are removing title and will implement\n  // this as a <Tooltip> component when we have one.\n  // TODO JET-51517 implement reveal icon title as a Tooltip\n  // const hidePasswordStr = translations.inputPassword_hide();\n  // const showPasswordStr = translations.inputPassword_show();\n  const passwordMaskedStr = translations.inputPassword_hidden();\n  // TODO: Use toggle <Button> when that is available, JET-49207\n  return (\n    <button\n      aria-label={passwordMaskedStr}\n      role=\"switch\"\n      aria-checked={isRevealed ? false : true}\n      class={revealToggleIconStyles.base}\n      tabIndex={0}\n      {...pressProps}>\n      {isRevealed ? <ViewHideIcon /> : <ViewIcon />}\n    </button>\n  );\n}\n","/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\n\nimport { ComponentProps, Ref } from 'preact';\nimport { forwardRef } from 'preact/compat';\nimport { useCallback } from 'preact/hooks';\nimport { FocusableHandle, useFocusableTextField } from '../hooks/UNSAFE_useFocusableTextField';\nimport { useFormContext } from '../hooks/UNSAFE_useFormContext';\nimport { FormFieldContext } from '../hooks/UNSAFE_useFormFieldContext';\nimport { useTextField } from '../hooks/UNSAFE_useTextField';\nimport { useHover } from '../hooks/UNSAFE_useHover';\nimport { Label } from '../UNSAFE_Label';\nimport {\n  ReadonlyTextField,\n  ReadonlyTextFieldInput,\n  TextField,\n  TextFieldInput\n} from '../UNSAFE_TextField';\nimport { InlineUserAssistance } from '../UNSAFE_UserAssistance';\nimport { RevealToggleIcon } from './RevealToggleIcon';\nimport { useClearIcon } from '../hooks/UNSAFE_useClearIcon';\nimport { beforeVNode } from '../utils/UNSAFE_componentUtils';\nimport { ClearIcon } from '../UNSAFE_InputText/ClearIcon';\nimport { Size } from '../utils/UNSAFE_size';\nimport { useToggle } from '../hooks/UNSAFE_useToggle';\nimport { useCurrentValueReducer } from '../hooks/UNSAFE_useCurrentValueReducer';\nimport { ValueUpdateDetail } from '../utils/UNSAFE_valueUpdateDetail';\n\ntype PickedPropsFromTextField = Pick<ComponentProps<typeof TextField>, 'id'>;\n\ntype PickedPropsFromTextFieldInput = Pick<\n  ComponentProps<typeof TextFieldInput>,\n  | 'autoComplete'\n  | 'autoFocus'\n  | 'placeholder'\n  | 'isRequired'\n  | 'textAlign'\n  | 'value'\n  | 'onInput'\n  | 'onCommit'\n>;\n\ntype PickedPropsFromInlineUserAssistance = Pick<\n  ComponentProps<typeof InlineUserAssistance>,\n  | 'assistiveText'\n  | 'helpSourceLink'\n  | 'helpSourceText'\n  | 'isRequiredShown'\n  | 'messages'\n  | 'userAssistanceDensity'\n>;\n\ntype Props = PickedPropsFromTextField &\n  PickedPropsFromTextFieldInput &\n  PickedPropsFromInlineUserAssistance & {\n    hasClearIcon?: 'always' | 'conditionally' | 'never';\n    hasRevealToggle?: 'always' | 'never';\n    isDisabled?: boolean;\n    isReadonly?: boolean;\n    label: string;\n    labelEdge?: 'inside' | 'start' | 'top' | 'none';\n    labelStartWidth?: Size;\n  };\n\n// One way InputPassword differs from InputText is InputPassword's readonly\n// is implemented with an <input> and not a <div>.\nexport const InputPassword = forwardRef(\n  (\n    {\n      assistiveText,\n      autoComplete = 'off',\n      autoFocus = false,\n      hasClearIcon,\n      hasRevealToggle = 'always',\n      helpSourceLink,\n      helpSourceText,\n      id,\n      isDisabled: propIsDisabled,\n      isReadonly: propIsReadonly,\n      isRequired = false,\n      isRequiredShown,\n      label,\n      labelEdge: propLabelEdge,\n      messages,\n      placeholder,\n      textAlign: propTextAlign,\n      userAssistanceDensity: propUserAssistanceDensity,\n      value,\n      onInput,\n      onCommit\n    }: Props,\n    ref?: Ref<FocusableHandle>\n  ) => {\n    const { currentCommitValue, dispatch } = useCurrentValueReducer({ value });\n    const onInputAndDispatch = useCallback(\n      (detail: ValueUpdateDetail<string>) => {\n        // Should dispatch happen first? This will queue up a re-render, ordering should not cause issues (this is async)\n        dispatch({ type: 'input', payload: detail.value });\n        onInput?.(detail);\n      },\n      [onInput]\n    );\n    const onCommitAndDispatch = useCallback(\n      (detail: ValueUpdateDetail<string>) => {\n        // Should dispatch happen first? This will queue up a re-render, ordering should not cause issues (this is async)\n        dispatch({ type: 'commit', payload: detail.value });\n        onCommit?.(detail);\n      },\n      [onCommit]\n    );\n    const {\n      isDisabled: isFormDisabled,\n      isReadonly: isFormReadonly,\n      labelEdge: formLabelEdge,\n      textAlign: formTextAlign,\n      userAssistanceDensity: formUserAssistanceDensity\n    } = useFormContext();\n    // default to FormContext values if component properties are not specified\n    const isDisabled = propIsDisabled ?? isFormDisabled;\n    const isReadonly = propIsReadonly ?? isFormReadonly;\n    const labelEdge = propLabelEdge ?? formLabelEdge;\n    const textAlign = propTextAlign ?? formTextAlign;\n    const userAssistanceDensity = propUserAssistanceDensity ?? formUserAssistanceDensity;\n    const {\n      bool: isRevealed,\n      setFalse: setRevealedFalse,\n      setTrue: setRevealedTrue\n    } = useToggle(false);\n    const { enabledElementRef, focusProps, isFocused, readonlyElementRef } = useFocusableTextField<\n      HTMLInputElement,\n      HTMLInputElement\n    >({ isDisabled, isReadonly, ref, onBlurWithin: setRevealedFalse });\n    const { hoverProps, isHover } = useHover({ isDisabled: isReadonly || isDisabled || false });\n    const { formFieldContext, inputProps, labelProps, textFieldProps, userAssistanceProps } =\n      useTextField({\n        id,\n        isDisabled,\n        isFocused,\n        isReadonly,\n        labelEdge,\n        messages,\n        value\n      });\n\n    // Callback on the RevealToggleButton.\n    // When the user clicks on the reveal buttton,\n    // toggle revealing/masking password\n    const onRevealIconPress = useCallback(() => {\n      isRevealed ? setRevealedFalse() : setRevealedTrue();\n    }, [isRevealed]);\n\n    const revealToggleIcon =\n      !isDisabled && hasRevealToggle === 'always' ? (\n        <RevealToggleIcon onPress={onRevealIconPress} isRevealed={isRevealed} />\n      ) : null;\n    const onClickClearIcon = useCallback(() => {\n      // Clicking the clear icon should put the focus on the input field\n      enabledElementRef.current?.focus();\n      // Send an event to clear the field's value\n      onInputAndDispatch?.({ previousValue: value, value: '' });\n    }, [onInput, value]);\n\n    const maybeClearIcon = useClearIcon({\n      clearIcon: <ClearIcon onClick={onClickClearIcon} />,\n      display: hasClearIcon,\n      hasValue: formFieldContext.hasValue,\n      isFocused,\n      isEnabled: !isReadonly && !isDisabled,\n      isHover\n    });\n    const endContentCombined = beforeVNode(revealToggleIcon, maybeClearIcon);\n\n    const labelComp = labelEdge !== 'none' ? <Label {...labelProps}>{label}</Label> : undefined;\n\n    const fieldLabelProps = {\n      label: labelEdge !== 'none' ? labelComp : undefined,\n      labelEdge: labelEdge !== 'none' ? labelEdge : undefined\n    };\n\n    const ariaLabel = labelEdge === 'none' ? label : undefined;\n\n    const inlineUserAssistance =\n      isDisabled || isReadonly ? (\n        // save space for user assistance if density is 'efficient', even though we don't\n        // render user assistance for disabled or readonly fields\n        userAssistanceDensity !== 'efficient' ? undefined : (\n          <InlineUserAssistance\n            userAssistanceDensity={userAssistanceDensity}\n            {...userAssistanceProps}\n          />\n        )\n      ) : (\n        <InlineUserAssistance\n          assistiveText={assistiveText}\n          helpSourceLink={helpSourceLink}\n          helpSourceText={helpSourceText}\n          messages={messages}\n          isRequiredShown={isRequiredShown}\n          userAssistanceDensity={userAssistanceDensity}\n          {...userAssistanceProps}\n        />\n      );\n\n    if (isReadonly) {\n      return (\n        <FormFieldContext.Provider value={formFieldContext}>\n          <ReadonlyTextField\n            role=\"presentation\"\n            inlineUserAssistance={inlineUserAssistance}\n            {...fieldLabelProps}>\n            <ReadonlyTextFieldInput\n              ariaLabel={ariaLabel}\n              ariaLabelledby={labelProps.id}\n              as=\"input\"\n              autoFocus={autoFocus}\n              elementRef={readonlyElementRef}\n              id={id}\n              textAlign={textAlign}\n              type=\"password\"\n              value={value}\n              hasInsideLabel={label !== undefined && labelEdge === 'inside'}\n            />\n          </ReadonlyTextField>\n        </FormFieldContext.Provider>\n      );\n    }\n\n    const mainContent = (\n      <TextFieldInput\n        ariaLabel={ariaLabel}\n        autoComplete={autoComplete}\n        autoFocus={autoFocus}\n        currentCommitValue={currentCommitValue}\n        hasInsideLabel={labelComp !== undefined && labelEdge === 'inside'}\n        inputRef={enabledElementRef}\n        isRequired={isRequired}\n        onInput={onInputAndDispatch}\n        onCommit={onCommitAndDispatch}\n        placeholder={placeholder}\n        textAlign={textAlign}\n        value={value}\n        type={isRevealed ? 'text' : 'password'}\n        {...inputProps}\n      />\n    );\n\n    return (\n      <FormFieldContext.Provider value={formFieldContext}>\n        <TextField\n          endContent={endContentCombined}\n          inlineUserAssistance={inlineUserAssistance}\n          mainContent={mainContent}\n          onBlur={focusProps.onfocusout}\n          onFocus={focusProps.onfocusin}\n          {...textFieldProps}\n          {...fieldLabelProps}\n          {...hoverProps}></TextField>\n      </FormFieldContext.Provider>\n    );\n  }\n);\n"],"names":["revealToggleIconStyles","RevealToggleIcon","isRevealed","onPress","passwordMaskedStr","useTranslationBundle","inputPassword_hidden","InputPassword","forwardRef","assistiveText","autoComplete","autoFocus","hasClearIcon","hasRevealToggle","helpSourceLink","helpSourceText","id","isDisabled","propIsDisabled","isReadonly","propIsReadonly","isRequired","isRequiredShown","label","labelEdge","propLabelEdge","messages","placeholder","textAlign","propTextAlign","userAssistanceDensity","propUserAssistanceDensity","value","onInput","onCommit","ref","currentCommitValue","dispatch","useCurrentValueReducer","onInputAndDispatch","useCallback","detail","type","payload","onCommitAndDispatch","isFormDisabled","isFormReadonly","formLabelEdge","formTextAlign","formUserAssistanceDensity","useFormContext","bool","setFalse","setRevealedFalse","setTrue","setRevealedTrue","useToggle","enabledElementRef","focusProps","isFocused","readonlyElementRef","useFocusableTextField","onBlurWithin","hoverProps","isHover","useHover","formFieldContext","inputProps","labelProps","textFieldProps","userAssistanceProps","useTextField","onRevealIconPress","revealToggleIcon","_jsx","onClickClearIcon","_a","current","focus","previousValue","maybeClearIcon","useClearIcon","clearIcon","ClearIcon","onClick","display","hasValue","isEnabled","endContentCombined","beforeVNode","labelComp","Label","Object","assign","undefined","fieldLabelProps","ariaLabel","inlineUserAssistance","jsx","InlineUserAssistance","FormFieldContext","Provider","children","ReadonlyTextField","role","ReadonlyTextFieldInput","ariaLabelledby","as","elementRef","hasInsideLabel","mainContent","TextFieldInput","inputRef","TextField","endContent","onBlur","onfocusout","onFocus","onfocusin"],"mappings":"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"}
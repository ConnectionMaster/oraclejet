{"version":3,"file":"TextAreaAutosize-29490bc0.js","sources":["../../src/UNSAFE_TextAreaAutosize/ScrollHeightUtils.tsx","../../src/UNSAFE_TextAreaAutosize/useTextAreaAutosizing.tsx","../../src/UNSAFE_TextAreaAutosize/TextAreaAutosize.tsx"],"sourcesContent":["// returns the lineHeight as a number of pixels.\nexport const calculateLineHeight = (textarea: HTMLTextAreaElement): number => {\n  const computedStyle = window.getComputedStyle(textarea);\n  const computedlineHeight = computedStyle.lineHeight;\n  if (computedlineHeight === 'normal') {\n    // We get 'normal' for values 'initial', 'inherit', 'unset' and 'normal'\n    // TODO: Unclear if we need this.\n    // getComputedStyle always return fontSize in pixels.  Not likely a float, but since it's legal\n    // we use parseFloat()\n    var fontSize = parseFloat(computedStyle.fontSize);\n    return 1.2 * fontSize;\n  }\n  return parseFloat(computedlineHeight);\n};\nexport const getStylingHeight = (textarea: HTMLTextAreaElement) => {\n  const cssStyle = window.getComputedStyle(textarea);\n  const paddingTop = parseFloat(cssStyle.paddingTop);\n  const paddingBottom = parseFloat(cssStyle.paddingBottom);\n  const borderTop = parseFloat(cssStyle.borderTop);\n  const borderBottom = parseFloat(cssStyle.borderBottom);\n  return { paddingHeight: paddingTop + paddingBottom, borderHeight: borderTop + borderBottom };\n};\n","import { ComponentProps } from 'preact';\nimport { useLayoutEffect, Ref } from 'preact/hooks';\nimport { calculateLineHeight, getStylingHeight } from './ScrollHeightUtils';\nimport { TextAreaAutosize } from './TextAreaAutosize';\n\ntype PickedPropsFromTextAreaAutosize = Pick<\n  ComponentProps<typeof TextAreaAutosize>,\n  'minRows' | 'maxRows' | 'value'\n>;\ntype Props = PickedPropsFromTextAreaAutosize & {\n  isReadonly?: boolean;\n  enabledElementRef: Ref<HTMLTextAreaElement>;\n  readonlyElementRef: Ref<HTMLTextAreaElement>;\n};\n\n// TODO: Make this fire when the container resizes - JET-50840\nexport const useTextAreaAutosizing = ({\n  isReadonly,\n  enabledElementRef,\n  readonlyElementRef,\n  minRows = 2,\n  maxRows,\n  value\n}: Props) => {\n  useLayoutEffect(() => {\n    const textareaRef = isReadonly ? readonlyElementRef : enabledElementRef;\n    if (textareaRef.current === null) return;\n    const textarea = textareaRef.current;\n    const lineHeight = calculateLineHeight(textarea);\n    textarea.style.height = '0';\n    const { paddingHeight, borderHeight } = getStylingHeight(textarea);\n    const heightForMinRows = lineHeight * minRows + paddingHeight + borderHeight;\n    const scrollHeight = textarea.scrollHeight + borderHeight;\n    var resizedHeight = 0;\n    // if maxRows is -1 the textarea will grow or shrink to fit all the content.\n    // it won't shrink any less than rows.\n    if (maxRows === undefined) {\n      // we want to fit the entire scrollHeight, but we don't want\n      // to shrink smaller than the height for rows.\n      if (scrollHeight < heightForMinRows) {\n        resizedHeight = heightForMinRows;\n      } else {\n        resizedHeight = scrollHeight;\n      }\n    } else if (maxRows > minRows) {\n      // if maxRows is positive and greater than rows, the textarea will grow to fit the content\n      // up to maxrows, or shrink to fit the content and down to rows.\n      const heightForMaxRows = lineHeight * maxRows + paddingHeight + borderHeight;\n      if (scrollHeight > heightForMaxRows) {\n        resizedHeight = heightForMaxRows;\n      } else if (scrollHeight < heightForMinRows) {\n        resizedHeight = heightForMinRows;\n      } else {\n        resizedHeight = scrollHeight;\n      }\n    } else {\n      resizedHeight = heightForMinRows;\n    }\n    // The 0.5 gaurantees that the clientHeight will be bigger than the scrollHeight, so no scrollbar appears.\n    textarea.style.height = resizedHeight + 0.5 + 'px';\n  }, [value, minRows, maxRows, isReadonly]);\n};\n","/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\n\nimport { ComponentProps, Fragment, Ref } from 'preact';\nimport { forwardRef, useCallback } from 'preact/compat';\nimport { useFormContext } from '../hooks/UNSAFE_useFormContext';\nimport { FormFieldContext } from '../hooks/UNSAFE_useFormFieldContext';\nimport { FocusableHandle, useFocusableTextField } from '../hooks/UNSAFE_useFocusableTextField';\nimport { Label } from '../UNSAFE_Label';\nimport {\n  ReadonlyTextField,\n  ReadonlyTextFieldInput,\n  TextField,\n  TextFieldInput\n} from '../UNSAFE_TextField';\nimport { useTextField } from '../hooks/UNSAFE_useTextField';\nimport { InlineUserAssistance } from '../UNSAFE_UserAssistance';\nimport { CountUnit, useLengthFilter } from '../hooks/UNSAFE_useLengthFilter';\nimport { MaxLengthLiveRegion } from '../UNSAFE_TextField';\nimport { useTextAreaAutosizing } from './useTextAreaAutosizing';\nimport { Size } from '../utils/UNSAFE_size';\nimport { useCurrentValueReducer } from '../hooks/UNSAFE_useCurrentValueReducer';\nimport { ValueUpdateDetail } from '../utils/UNSAFE_valueUpdateDetail';\n\ntype PickedPropsFromTextField = Pick<ComponentProps<typeof TextField>, 'id'>;\n\ntype PickedPropsFromTextFieldTextArea = Pick<\n  ComponentProps<typeof TextFieldInput>,\n  | 'autoComplete'\n  | 'autoFocus'\n  | 'placeholder'\n  | 'isRequired'\n  | 'role'\n  | 'textAlign'\n  | 'value'\n  | 'onInput'\n  | 'onCommit'\n>;\n\ntype PickedPropsFromInlineUserAssistance = Pick<\n  ComponentProps<typeof InlineUserAssistance>,\n  | 'assistiveText'\n  | 'helpSourceLink'\n  | 'helpSourceText'\n  | 'isRequiredShown'\n  | 'messages'\n  | 'userAssistanceDensity'\n>;\n\ntype Props = PickedPropsFromTextField &\n  PickedPropsFromTextFieldTextArea &\n  PickedPropsFromInlineUserAssistance & {\n    isDisabled?: boolean;\n    isReadonly?: boolean;\n    label: string;\n    labelEdge?: 'inside' | 'start' | 'top' | 'none';\n    labelStartWidth?: Size;\n    minRows?: number;\n    maxRows?: number;\n    maxLength?: number;\n    maxLengthUnit?: CountUnit;\n    // TODO: include virtualKeyboard prop that applies type only on mobile, not on desktop\n  };\n\nexport const TextAreaAutosize = forwardRef(\n  (\n    {\n      assistiveText,\n      autoComplete = 'off',\n      autoFocus = false,\n      helpSourceLink,\n      helpSourceText,\n      id,\n      isDisabled: propIsDisabled,\n      isReadonly: propIsReadonly,\n      isRequired = false,\n      isRequiredShown,\n      label,\n      labelEdge: propLabelEdge,\n      labelStartWidth: propLabelStartWidth,\n      maxLength,\n      maxLengthUnit,\n      maxRows,\n      messages,\n      minRows = 2,\n      placeholder,\n      role,\n      //TODO: Add counter to show the length remaining - JET-50752\n      textAlign: propTextAlign,\n      userAssistanceDensity: propUserAssistanceDensity,\n      value,\n      onInput,\n      onCommit\n    }: Props,\n    ref?: Ref<FocusableHandle>\n  ) => {\n    const { currentCommitValue, dispatch } = useCurrentValueReducer({ value });\n    const onInputAndDispatch = useCallback(\n      (detail: ValueUpdateDetail<string>) => {\n        // Should dispatch happen first? This will queue up a re-render, ordering should not cause issues (this is async)\n        dispatch({ type: 'input', payload: detail.value });\n        onInput?.(detail);\n      },\n      [onInput]\n    );\n    const onCommitAndDispatch = useCallback(\n      (detail: ValueUpdateDetail<string>) => {\n        // Should dispatch happen first? This will queue up a re-render, ordering should not cause issues (this is async)\n        dispatch({ type: 'commit', payload: detail.value });\n        onCommit?.(detail);\n      },\n      [onCommit]\n    );\n    const {\n      isDisabled: isFormDisabled,\n      isReadonly: isFormReadonly,\n      labelEdge: formLabelEdge,\n      labelStartWidth: formLabelStartWidth,\n      textAlign: formTextAlign,\n      userAssistanceDensity: formUserAssistanceDensity\n    } = useFormContext();\n    // default to FormContext values if component properties are not specified\n    const isDisabled = propIsDisabled ?? isFormDisabled;\n    const isReadonly = propIsReadonly ?? isFormReadonly;\n    const labelEdge = propLabelEdge ?? formLabelEdge;\n    const labelStartWidth = propLabelStartWidth ?? formLabelStartWidth;\n    const textAlign = propTextAlign ?? formTextAlign;\n    const userAssistanceDensity = propUserAssistanceDensity ?? formUserAssistanceDensity;\n\n    const { enabledElementRef, readonlyElementRef, focusProps, isFocused } = useFocusableTextField<\n      HTMLTextAreaElement,\n      HTMLTextAreaElement\n    >({ isDisabled, isReadonly, ref });\n\n    const { formFieldContext, inputProps, labelProps, textFieldProps, userAssistanceProps } =\n      useTextField({\n        id,\n        isDisabled,\n        isFocused,\n        isReadonly,\n        labelEdge,\n        messages,\n        value,\n        variant: 'textarea'\n      });\n\n    // Handle length filter for user-typed inputs and controlled inputs\n    const { isMaxLengthExceeded, valueLength, onFilteredInput } = useLengthFilter({\n      maxLength,\n      maxLengthUnit,\n      value,\n      onInput: onInputAndDispatch,\n      onCommit: onCommitAndDispatch\n    });\n\n    const labelComp = labelEdge !== 'none' ? <Label {...labelProps}>{label}</Label> : undefined;\n\n    const fieldLabelProps = {\n      label: labelEdge !== 'none' ? labelComp : undefined,\n      labelEdge: labelEdge !== 'none' ? labelEdge : undefined,\n      labelStartWidth: labelEdge !== 'none' ? labelStartWidth : undefined\n    };\n    const ariaLabel = labelEdge === 'none' ? label : undefined;\n\n    const inlineUserAssistance =\n      isDisabled || isReadonly ? (\n        // save space for user assistance if density is 'efficient', even though we don't\n        // render user assistance for disabled or readonly fields\n        userAssistanceDensity !== 'efficient' ? undefined : (\n          <InlineUserAssistance\n            userAssistanceDensity={userAssistanceDensity}\n            {...userAssistanceProps}\n          />\n        )\n      ) : (\n        <InlineUserAssistance\n          assistiveText={assistiveText}\n          fieldLabel={label}\n          helpSourceLink={helpSourceLink}\n          helpSourceText={helpSourceText}\n          messages={messages}\n          isRequiredShown={isRequiredShown}\n          userAssistanceDensity={userAssistanceDensity}\n          {...userAssistanceProps}\n        />\n      );\n\n    useTextAreaAutosizing({\n      isReadonly,\n      enabledElementRef,\n      readonlyElementRef,\n      minRows,\n      maxRows,\n      value\n    });\n\n    if (isReadonly) {\n      // TODO: should be able to configure whether start/end content is shown when readonly\n      // JET-49916 - Preact InputText: show start/end content when readonly\n      return (\n        <FormFieldContext.Provider value={formFieldContext}>\n          <ReadonlyTextField\n            role=\"presentation\"\n            inlineUserAssistance={inlineUserAssistance}\n            variant=\"textarea\"\n            {...fieldLabelProps}>\n            <ReadonlyTextFieldInput\n              ariaLabel={ariaLabel}\n              ariaLabelledby={labelProps.id}\n              as=\"textarea\"\n              elementRef={readonlyElementRef}\n              rows={minRows}\n              autoFocus={autoFocus}\n              id={id}\n              textAlign={textAlign}\n              value={value}\n              hasInsideLabel={label !== undefined && labelEdge === 'inside'}\n            />\n          </ReadonlyTextField>\n        </FormFieldContext.Provider>\n      );\n    }\n\n    const mainContent = (\n      <Fragment>\n        <TextFieldInput\n          as=\"textarea\"\n          ariaLabel={ariaLabel}\n          autoComplete={autoComplete}\n          autoFocus={autoFocus}\n          currentCommitValue={currentCommitValue}\n          hasInsideLabel={labelComp !== undefined && labelEdge === 'inside'}\n          isRequired={isRequired}\n          inputRef={enabledElementRef}\n          onCommit={onCommitAndDispatch}\n          onInput={onFilteredInput}\n          placeholder={placeholder}\n          role={role}\n          rows={minRows}\n          textAlign={textAlign}\n          value={value}\n          {...inputProps}\n        />\n        {maxLength !== undefined && (\n          <MaxLengthLiveRegion {...{ isMaxLengthExceeded, maxLength, valueLength }} />\n        )}\n      </Fragment>\n    );\n\n    return (\n      <FormFieldContext.Provider value={formFieldContext}>\n        <TextField\n          mainContent={mainContent}\n          inlineUserAssistance={inlineUserAssistance}\n          onBlur={focusProps?.onfocusout}\n          onFocus={focusProps?.onfocusin}\n          {...textFieldProps}\n          {...fieldLabelProps}></TextField>\n      </FormFieldContext.Provider>\n    );\n  }\n);\n"],"names":["useTextAreaAutosizing","isReadonly","enabledElementRef","readonlyElementRef","minRows","maxRows","value","useLayoutEffect","textareaRef","current","textarea","lineHeight","computedStyle","window","getComputedStyle","computedlineHeight","parseFloat","fontSize","calculateLineHeight","style","height","paddingHeight","borderHeight","cssStyle","paddingTop","paddingBottom","borderTop","borderBottom","getStylingHeight","heightForMinRows","scrollHeight","resizedHeight","undefined","heightForMaxRows","TextAreaAutosize","forwardRef","assistiveText","autoComplete","autoFocus","helpSourceLink","helpSourceText","id","isDisabled","propIsDisabled","propIsReadonly","isRequired","isRequiredShown","label","labelEdge","propLabelEdge","labelStartWidth","propLabelStartWidth","maxLength","maxLengthUnit","messages","placeholder","role","textAlign","propTextAlign","userAssistanceDensity","propUserAssistanceDensity","onInput","onCommit","ref","currentCommitValue","dispatch","useCurrentValueReducer","onInputAndDispatch","useCallback","detail","type","payload","onCommitAndDispatch","isFormDisabled","isFormReadonly","formLabelEdge","formLabelStartWidth","formTextAlign","formUserAssistanceDensity","useFormContext","focusProps","isFocused","useFocusableTextField","formFieldContext","inputProps","labelProps","textFieldProps","userAssistanceProps","useTextField","variant","isMaxLengthExceeded","valueLength","onFilteredInput","useLengthFilter","labelComp","_jsx","Label","Object","assign","fieldLabelProps","ariaLabel","inlineUserAssistance","jsx","InlineUserAssistance","fieldLabel","FormFieldContext","Provider","children","ReadonlyTextField","ReadonlyTextFieldInput","ariaLabelledby","as","elementRef","rows","hasInsideLabel","mainContent","_jsxs","jsxs","Fragment","TextFieldInput","inputRef","MaxLengthLiveRegion","TextField","onBlur","onfocusout","onFocus","onfocusin"],"mappings":"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"}
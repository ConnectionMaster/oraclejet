{"version":3,"file":"UNSAFE_Button.js","sources":["../../src/UNSAFE_Button/BaseButton.tsx","../../src/UNSAFE_Button/ButtonLayout.tsx","../../src/UNSAFE_Button/Button.tsx"],"sourcesContent":["/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * Licensed under The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\nimport { ComponentChildren, JSX, Ref } from 'preact';\nimport { cssProps } from '@oracle/oraclejet-cssprops';\nimport { usePress } from '../hooks/UNSAFE_usePress';\nimport { useHover } from '../hooks/UNSAFE_useHover';\nimport { classNames } from '../utils/UNSAFE_classNames';\nimport { forwardRef } from 'preact/compat';\nimport type { DimensionProps } from '../utils/UNSAFE_interpolations/dimensions';\nimport { dimensionInterpolations } from '../utils/UNSAFE_interpolations/dimensions';\nimport { mergeInterpolations } from '../utils/UNSAFE_mergeInterpolations';\nimport { getClientHints } from '../utils/PRIVATE_clientHints';\n\ntype ButtonElementDetails =\n  | { type: 'button' }\n  | { type: 'a'; href: string; target?: string; rel?: string };\nconst NullFunction = () => null;\n\ntype IntrinsicProps = Pick<JSX.HTMLAttributes<HTMLElement>, 'autofocus' | 'title'>;\n\nexport type Props = IntrinsicProps &\n  DimensionProps & {\n    /**\n     *The default slot is the button's text label. The oj-c-button element accepts plain text or DOM nodes as children for the default slot.\"\n     */\n    children?: ComponentChildren;\n\n    /**\n     * Specifies that the button element should be disabled.\n     */\n    isDisabled?: boolean;\n\n    /**\n     * Indicates in what states the button has chrome (background and border).\n     *     \"borderless\"': \"Borderless buttons are the least prominent variation.\n     * Borderless buttons are useful for supplemental actions that require minimal emphasis.\",\n     *     \"outlined\"': \"Outlined buttons are salient, but lighter weight than\n     * solid buttons. Outlined buttons are useful for secondary actions.\",\n     *     \"solid\"': \"Solid buttons stand out, and direct the user's attention to the\n     *  most important actions in the UI.\",\n     *     \"callToAction\"': \"A Call To Action (CTA) button guides the user to take or\n     * complete the action that is the main goal of the page or page section. There\n     * should only be one CTA button on a page at any given time.\",\n     *     \"danger\"': \"A Danger button alerts the user to a dangerous situation.\",\n     */\n    variant?: 'borderless' | 'outlined' | 'solid' | 'callToAction' | 'danger';\n\n    /**\n     * size\n     */\n    size?: 'sm' | 'md' | 'lg';\n\n    /**\n     * edge\n     */\n    edge?: 'none' | 'bottom';\n\n    /**\n     * accessibleLabel\n     */\n    accessibleLabel?: string;\n\n    /**\n     * styling\n     */\n    styling?: 'default' | 'min' | 'unstyled';\n\n    /**\n     * Triggered when a button is clicked, whether by keyboard, mouse, or touch events.\n     */\n    onAction?: () => void;\n\n    /**\n     * Indicate element type and associated details\n     */\n    elementDetails?: ButtonElementDetails;\n  };\n\nconst compStyles = {\n  base: cssProps`${{\n    alignItems: 'center',\n    backgroundColor: 'var(--oj-c-PRIVATE-DO-NOT-USE-button-bg-color)',\n    borderColor: 'var(--oj-c-PRIVATE-DO-NOT-USE-button-border-color)',\n    borderRadius: 'var(--oj-c-PRIVATE-DO-NOT-USE-button-border-radius)',\n    borderStyle: 'solid',\n    borderWidth: '1px',\n    boxSizing: 'border-box',\n    color: 'var(--oj-c-PRIVATE-DO-NOT-USE-button-text-color)',\n    cursor: 'var(--oj-c-PRIVATE-DO-NOT-USE-core-cursor-clickable)',\n    display: 'inline-block',\n    fontFamily: 'inherit',\n    fontSize: 'var(--oj-c-PRIVATE-DO-NOT-USE-button-font-size)',\n    fontWeight: 'var(--oj-c-PRIVATE-DO-NOT-USE-button-font-weight)',\n    height: 'var(--oj-c-PRIVATE-DO-NOT-USE-button-height)',\n    justifyContent: 'center',\n    minWidth: 'var(--oj-c-PRIVATE-DO-NOT-USE-button-height)',\n    overflowX: 'hidden',\n    paddingInlineStart: 'var(--oj-c-PRIVATE-DO-NOT-USE-button-text-to-edge-padding)',\n    paddingInlineEnd: 'var(--oj-c-PRIVATE-DO-NOT-USE-button-text-to-edge-padding)',\n    paddingTop: 0,\n    paddingBottom: 0,\n    pointerEvents: 'auto',\n    textOverflow: 'ellipsis',\n    verticalAlign: 'top',\n    WebkitTapHighlightColor: 'rgba(0,0,0,0)',\n    whiteSpace: 'nowrap',\n\n    // @ts-ignore\n    '&:active:enabled': {\n      backgroundColor: 'var(--oj-c-PRIVATE-DO-NOT-USE-button-bg-color-active)',\n      borderColor: 'var(--oj-c-PRIVATE-DO-NOT-USE-button-border-color-active)',\n      color: 'var(--oj-c-PRIVATE-DO-NOT-USE-button-text-color-active)'\n    },\n    '&:focus': {\n      outlineStyle: 'dotted',\n      outlineOffset: '1px',\n      outlineWidth: '1px',\n      outlineColor: 'var(--oj-c-PRIVATE-DO-NOT-USE-core-focus-border-color)'\n    },\n    '@supports selector(:focus-visible)': {\n      '&:focus': {\n        /* Remove the focus indicator on mouse-focus for browsers\n           that do support :focus-visible */\n        outline: 'none'\n      }\n    },\n    '&:focus-visible': {\n      outlineStyle: 'dotted',\n      outlineOffset: '1px',\n      outlineWidth: '1px',\n      outlineColor: 'var(--oj-c-PRIVATE-DO-NOT-USE-core-focus-border-color)'\n    }\n  }}`,\n\n  hover: cssProps`${{\n    // @ts-ignore\n    '&:not(:active)': {\n      backgroundColor: 'var(--oj-c-PRIVATE-DO-NOT-USE-button-bg-color-hover)',\n      borderColor: 'var(--oj-c-PRIVATE-DO-NOT-USE-button-border-color-hover)',\n      color: 'var(--oj-c-PRIVATE-DO-NOT-USE-button-text-color-hover)'\n    }\n  }}`,\n\n  pseudohover: cssProps`${{\n    // @ts-ignore\n    '@media(hover: hover)': {\n      '&:hover:enabled:not(:active)': {\n        backgroundColor: 'var(--oj-c-PRIVATE-DO-NOT-USE-button-bg-color-hover)',\n        borderColor: 'var(--oj-c-PRIVATE-DO-NOT-USE-button-border-color-hover)',\n        color: 'var(--oj-c-PRIVATE-DO-NOT-USE-button-text-color-hover)'\n      }\n    }\n  }}`,\n\n  unstyled: cssProps`${{\n    boxSizing: 'border-box',\n    cursor: 'var(--oj-c-PRIVATE-DO-NOT-USE-core-cursor-clickable)',\n    height: 'var(--oj-c-PRIVATE-DO-NOT-USE-button-height)'\n  }}`,\n\n  min: cssProps`${{\n    paddingInlineStart: '0',\n    paddingInlineEnd: '0'\n  }}`,\n\n  disabled: cssProps`${{\n    pointerEvents: 'none',\n    backgroundColor: 'var(--oj-c-PRIVATE-DO-NOT-USE-button-bg-color-disabled)',\n    borderColor: 'var(--oj-c-PRIVATE-DO-NOT-USE-button-border-color-disabled)',\n    color: 'var(--oj-c-PRIVATE-DO-NOT-USE-button-text-color-disabled)'\n  }}`,\n\n  bottom: cssProps`${{\n    borderLeftWidth: '0',\n    borderRightWidth: '0',\n    borderBlockEndWidth: '0',\n    width: '100%',\n    borderTopLeftRadius: '0',\n    borderTopRightRadius: '0'\n  }}`\n};\n\nconst interpolations = [...Object.values(dimensionInterpolations)];\n\nconst styleInterpolations = mergeInterpolations<Props>(interpolations);\n\nconst clientHints = getClientHints();\n// :active only works on IOS devices if a touch handler exists\nconst iosProps = clientHints.platform === 'ios' ? { ontouchstart: function () {} } : {};\nconst isHybrid = getClientHints().isHybrid;\n\nexport const BaseButton = forwardRef(\n  (\n    {\n      variant = 'outlined',\n      isDisabled = false,\n      size = 'md',\n      elementDetails = { type: 'button' },\n      styling = 'default',\n      edge = 'none',\n      accessibleLabel,\n      ...props\n    }: Props,\n    ref?: Ref<HTMLButtonElement> & Ref<HTMLAnchorElement>\n  ) => {\n    const { pressProps } = usePress(props.onAction ? props.onAction : NullFunction, {\n      isDisabled\n    });\n    const { hoverProps, isHover } = useHover({ isDisabled: isHybrid });\n    const { class: cls, ...styles } = styleInterpolations(props);\n    const rootStyles = classNames([\n      styling === 'default' && compStyles.base,\n      styling === 'unstyled' && compStyles.unstyled,\n      (styling === 'min' && compStyles.base) || compStyles.min,\n      `oj-c-button-${variant}`,\n      `oj-c-button-${size}`,\n      isDisabled && compStyles.disabled,\n      edge === 'bottom' && compStyles.bottom,\n      !isHybrid && compStyles.pseudohover,\n      isHybrid && isHover && compStyles.hover\n    ]);\n    const { type: elementType = 'button', ...elementProps } = { ...elementDetails };\n    const role = elementType === 'button' ? { type: 'button' } : { role: 'link' };\n    const tooltip = props.title || accessibleLabel;\n    const ElementType = elementDetails.type;\n\n    return (\n      <ElementType\n        ref={ref}\n        disabled={isDisabled}\n        class={`${rootStyles} ${cls}`}\n        style={styles}\n        autofocus={props['autofocus']}\n        title={tooltip}\n        tabIndex={isDisabled ? -1 : 0}\n        aria-label={accessibleLabel}\n        {...elementProps}\n        {...role}\n        {...pressProps}\n        {...iosProps}\n        {...hoverProps}>\n        {props.children}\n      </ElementType>\n    );\n  }\n);\n","/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * Licensed under The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\nimport { ComponentChildren, ComponentProps } from 'preact';\nimport { cssProps } from '@oracle/oraclejet-cssprops';\nimport { classNames } from '../utils/UNSAFE_classNames';\nimport { BaseButton } from './BaseButton';\n\nexport type ButtonDisplay = 'icons' | 'label' | 'all';\n\nexport type Props = {\n  /**\n   *The default slot is the button's text label. The oj-c-button element accepts plain text or DOM nodes as children for the default slot.\"\n   */\n  children?: ComponentChildren;\n\n  /**\n   * The startIcon = is the button's start icon.\n   */\n  startIcon?: ComponentChildren;\n\n  /**\n   * The endIcon is the button's end icon.\n   */\n  endIcon?: ComponentChildren;\n\n  /**\n   * size\n   */\n  size?: ComponentProps<typeof BaseButton>['size'];\n\n  /**\n   * display\n   */\n  display?: ButtonDisplay;\n};\n\nconst compStyles = {\n  text: cssProps`${{\n    overflowX: 'hidden',\n    overflowY: 'hidden',\n    textOverflow: 'ellipsis',\n    whiteSpace: 'nowrap',\n    display: 'inline-flex'\n  }}`,\n\n  icon: cssProps`${{\n    display: 'inline-flex',\n    fontSize: 'var(--oj-c-PRIVATE-DO-NOT-USE-button-icon-size)',\n    fontWeight: 'normal',\n    marginTop: 0,\n    marginBottom: 0\n  }}`,\n\n  startText: cssProps`${{\n    marginInlineStart: 'var(--oj-c-PRIVATE-DO-NOT-USE-button-text-to-edge-padding)'\n  }}`,\n\n  endText: cssProps`${{\n    marginInlineEnd: 'var(--oj-c-PRIVATE-DO-NOT-USE-button-text-to-edge-padding)'\n  }}`,\n\n  startIcon: cssProps`${{\n    marginInlineEnd: 'var(--oj-c-PRIVATE-DO-NOT-USE-button-icon-to-text-padding)',\n    marginInlineStart: 'var(--oj-c-PRIVATE-DO-NOT-USE-button-icon-to-edge-padding)'\n  }}`,\n\n  startIconOnly: cssProps`${{\n    marginInlineEnd: 'var(--oj-c-PRIVATE-DO-NOT-USE-button-icon-to-edge-padding)',\n    marginInlineStart: 'var(--oj-c-PRIVATE-DO-NOT-USE-button-icon-to-edge-padding)'\n  }}`,\n\n  endIcon: cssProps`${{\n    marginInlineStart: 'var(--oj-c-PRIVATE-DO-NOT-USE-button-icon-to-text-padding)',\n    marginInlineEnd: 'var(--oj-c-PRIVATE-DO-NOT-USE-button-icon-to-edge-padding)'\n  }}`,\n\n  label: cssProps`${{\n    cursor: 'inherit',\n    display: 'inline-flex',\n    alignItems: 'center',\n    justifyContent: 'center',\n    width: '100%',\n    height: '100%'\n  }}`\n};\n\nconst isNullOrUndefined = (\n  value: ComponentChildren | null | undefined\n): value is null | undefined => {\n  return value === null || value === undefined;\n};\n\nexport function ButtonLayout({ size = 'md', display = 'all', ...props }: Props) {\n  const showIcons = display == 'all' || display == 'icons';\n  const showText = display == 'all' || display == 'label';\n  const labelClass = compStyles.label;\n  const isOnlyIcon = props.startIcon && (display === 'icons' || !props.children) && !props.endIcon;\n  const textStartIcon = !isNullOrUndefined(props.startIcon) && display === 'all';\n  const textEndIcon = !isNullOrUndefined(props.endIcon) && display === 'all';\n  const isTwoIcons = props.startIcon && props.endIcon;\n\n  const endIconClass = `${compStyles.icon} oj-c-button-layout-${size} ${compStyles.endIcon}`;\n  const startIconStyles = classNames([\n    compStyles.icon,\n    `oj-c-button-layout-${size}`,\n    isOnlyIcon ? compStyles.startIconOnly : compStyles.startIcon\n  ]);\n  const textStyles = classNames([\n    compStyles.text,\n    textStartIcon && !isTwoIcons && compStyles.endText,\n    textEndIcon && !isTwoIcons && compStyles.startText\n  ]);\n\n  return (\n    <span class={labelClass}>\n      {showIcons && props.startIcon && <span class={startIconStyles}>{props.startIcon}</span>}\n      {showText && props.children && <span class={textStyles}> {props.children} </span>}\n      {showIcons && props.endIcon && <span class={endIconClass}>{props.endIcon}</span>}\n    </span>\n  );\n}\n","/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * Licensed under The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\nimport { JSX, ComponentChildren, ComponentProps, Ref } from 'preact';\nimport { BaseButton } from './BaseButton';\nimport { ButtonLayout } from './ButtonLayout';\nimport type { DimensionProps } from '../utils/UNSAFE_interpolations/dimensions';\nimport { forwardRef } from 'preact/compat';\n\ntype IntrinsicProps = Pick<JSX.HTMLAttributes<HTMLButtonElement>, 'autofocus'>;\n\ntype WidthProps = Pick<DimensionProps, 'width'>;\n\ntype Props = IntrinsicProps &\n  WidthProps & {\n    /**\n     * The startIcon = is the button's start icon.\n     */\n    startIcon?: ComponentChildren;\n\n    /**\n     * The endIcon is the button's end icon.\n     */\n    endIcon?: ComponentChildren;\n\n    /**\n     * Specifies that the button element should be disabled.\n     */\n    isDisabled?: boolean;\n\n    /**\n     * label - button label, used for accessibility if no override\n     */\n    label?: string;\n\n    /**\n     * accessibleLabel - override label for accessibility\n     */\n    accessibleLabel?: string;\n\n    /**\n     * Indicates in what states the button has chrome (background and border).\n     *     \"borderless\"': \"Borderless buttons are the least prominent variation.\n     * Borderless buttons are useful for supplemental actions that require minimal emphasis.\",\n     *     \"outlined\"': \"Outlined buttons are salient, but lighter weight than\n     * solid buttons. Outlined buttons are useful for secondary actions.\",\n     *     \"solid\"': \"Solid buttons stand out, and direct the user's attention to the\n     *  most important actions in the UI.\",\n     *     \"callToAction\"': \"A Call To Action (CTA) button guides the user to take or\n     * complete the action that is the main goal of the page or page section. There\n     * should only be one CTA button on a page at any given time.\",\n     *     \"danger\"': \"A Danger button alerts the user to a dangerous situation.\",\n     */\n    variant?: ComponentProps<typeof BaseButton>['variant'];\n\n    /**\n     * size\n     */\n    size?: ComponentProps<typeof BaseButton>['size'];\n\n    /**\n     * edge\n     */\n    edge?: ComponentProps<typeof BaseButton>['edge'];\n\n    /**\n     * Triggered when a button is clicked, whether by keyboard, mouse, or touch events.\n     */\n    onAction?: () => void | null;\n\n    /**\n     * display\n     */\n    display?: ComponentProps<typeof ButtonLayout>['display'];\n\n    /**\n     * title\n     */\n    title?: string;\n  };\n\nexport const Button = forwardRef(\n  (\n    {\n      variant = 'outlined',\n      isDisabled = false,\n      size = 'md',\n      display = 'all',\n      endIcon,\n      startIcon,\n      autofocus,\n      edge,\n      onAction,\n      label = '',\n      accessibleLabel,\n      title,\n      width\n    }: Props,\n    ref?: Ref<HTMLButtonElement>\n  ) => {\n    const labelOnly = (!startIcon && !endIcon) || display === 'label';\n    const content = labelOnly ? (\n      label\n    ) : (\n      <ButtonLayout display={display} startIcon={startIcon} endIcon={endIcon} size={size}>\n        {label}\n      </ButtonLayout>\n    );\n    return (\n      <BaseButton\n        ref={ref as Ref<HTMLButtonElement> & Ref<HTMLAnchorElement>}\n        isDisabled={isDisabled}\n        size={size}\n        width={width}\n        autofocus={autofocus}\n        edge={edge}\n        variant={variant}\n        styling={labelOnly ? 'min' : 'default'}\n        onAction={onAction}\n        accessibleLabel={accessibleLabel ?? (display === 'icons' ? label : undefined)}\n        title={title ?? (display === 'icons' ? accessibleLabel ?? label : undefined)}\n        aria-label={display === 'icons' ? label : null}>\n        {content}\n      </BaseButton>\n    );\n  }\n);\n"],"names":["NullFunction","compStyles","interpolations","Object","values","dimensionInterpolations","styleInterpolations","mergeInterpolations","clientHints","getClientHints","iosProps","platform","ontouchstart","isHybrid","BaseButton","forwardRef","_a","ref","variant","isDisabled","size","elementDetails","type","styling","edge","accessibleLabel","props","__rest","pressProps","usePress","onAction","hoverProps","isHover","useHover","_b","class","cls","styles","base","unstyled","bottom","pseudohover","hover","_c","assign","elementType","elementProps","tooltip","title","ElementType","_jsx","disabled","rootStyles","style","autofocus","tabIndex","role","children","isNullOrUndefined","value","undefined","ButtonLayout","display","labelClass","label","textStartIcon","startIcon","textEndIcon","endIcon","endIconClass","icon","text","isTwoIcons","endText","startText"],"mappings":"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"}
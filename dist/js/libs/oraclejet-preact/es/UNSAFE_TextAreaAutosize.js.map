{"version":3,"file":"UNSAFE_TextAreaAutosize.js","sources":["../../src/UNSAFE_TextAreaAutosize/ScrollHeightUtils.tsx","../../src/UNSAFE_TextAreaAutosize/useTextAreaAutosizing.tsx","../../src/UNSAFE_TextAreaAutosize/TextAreaAutosize.tsx"],"sourcesContent":["// returns the lineHeight as a number of pixels.\nexport const calculateLineHeight = (textarea: HTMLTextAreaElement): number => {\n  const computedStyle = window.getComputedStyle(textarea);\n  const computedlineHeight = computedStyle.lineHeight;\n  if (computedlineHeight === 'normal') {\n    // We get 'normal' for values 'initial', 'inherit', 'unset' and 'normal'\n    // TODO: Unclear if we need this.\n    // getComputedStyle always return fontSize in pixels.  Not likely a float, but since it's legal\n    // we use parseFloat()\n    var fontSize = parseFloat(computedStyle.fontSize);\n    return 1.2 * fontSize;\n  }\n  return parseFloat(computedlineHeight);\n};\nexport const getStylingHeight = (textarea: HTMLTextAreaElement) => {\n  const cssStyle = window.getComputedStyle(textarea);\n  const paddingTop = parseFloat(cssStyle.paddingTop);\n  const paddingBottom = parseFloat(cssStyle.paddingBottom);\n  const borderTop = parseFloat(cssStyle.borderTop);\n  const borderBottom = parseFloat(cssStyle.borderBottom);\n  return { paddingHeight: paddingTop + paddingBottom, borderHeight: borderTop + borderBottom };\n};\n","import { ComponentProps } from 'preact';\nimport { useLayoutEffect, Ref } from 'preact/hooks';\nimport { calculateLineHeight, getStylingHeight } from './ScrollHeightUtils';\nimport { TextAreaAutosize } from './TextAreaAutosize';\n\ntype PickedPropsFromTextAreaAutosize = Pick<\n  ComponentProps<typeof TextAreaAutosize>,\n  'minRows' | 'maxRows' | 'value'\n>;\ntype Props = PickedPropsFromTextAreaAutosize & {\n  isReadonly?: boolean;\n  enabledElementRef: Ref<HTMLTextAreaElement>;\n  readonlyElementRef: Ref<HTMLTextAreaElement>;\n};\n\n// TODO: Make this fire when the container resizes - JET-50840\nexport const useTextAreaAutosizing = ({\n  isReadonly,\n  enabledElementRef,\n  readonlyElementRef,\n  minRows = 2,\n  maxRows,\n  value\n}: Props) => {\n  useLayoutEffect(() => {\n    const textareaRef = isReadonly ? readonlyElementRef : enabledElementRef;\n    if (textareaRef.current === null) return;\n    const textarea = textareaRef.current;\n    const lineHeight = calculateLineHeight(textarea);\n    textarea.style.height = '0';\n    const { paddingHeight, borderHeight } = getStylingHeight(textarea);\n    const heightForMinRows = lineHeight * minRows + paddingHeight + borderHeight;\n    const scrollHeight = textarea.scrollHeight + borderHeight;\n    var resizedHeight = 0;\n    // if maxRows is -1 the textarea will grow or shrink to fit all the content.\n    // it won't shrink any less than rows.\n    if (maxRows === undefined) {\n      // we want to fit the entire scrollHeight, but we don't want\n      // to shrink smaller than the height for rows.\n      if (scrollHeight < heightForMinRows) {\n        resizedHeight = heightForMinRows;\n      } else {\n        resizedHeight = scrollHeight;\n      }\n    } else if (maxRows > minRows) {\n      // if maxRows is positive and greater than rows, the textarea will grow to fit the content\n      // up to maxrows, or shrink to fit the content and down to rows.\n      const heightForMaxRows = lineHeight * maxRows + paddingHeight + borderHeight;\n      if (scrollHeight > heightForMaxRows) {\n        resizedHeight = heightForMaxRows;\n      } else if (scrollHeight < heightForMinRows) {\n        resizedHeight = heightForMinRows;\n      } else {\n        resizedHeight = scrollHeight;\n      }\n    } else {\n      resizedHeight = heightForMinRows;\n    }\n    // The 0.5 gaurantees that the clientHeight will be bigger than the scrollHeight, so no scrollbar appears.\n    textarea.style.height = resizedHeight + 0.5 + 'px';\n  }, [value, minRows, maxRows, isReadonly]);\n};\n","/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\n\nimport { ComponentProps, Fragment, Ref } from 'preact';\nimport { forwardRef, useCallback } from 'preact/compat';\nimport { useFormContext } from '../hooks/UNSAFE_useFormContext';\nimport { FormFieldContext } from '../hooks/UNSAFE_useFormFieldContext';\nimport { FocusableHandle, useFocusableTextField } from '../hooks/UNSAFE_useFocusableTextField';\nimport { Label } from '../UNSAFE_Label';\nimport {\n  ReadonlyTextField,\n  ReadonlyTextFieldInput,\n  TextField,\n  TextFieldInput\n} from '../UNSAFE_TextField';\nimport { useTextField } from '../hooks/UNSAFE_useTextField';\nimport { InlineUserAssistance } from '../UNSAFE_UserAssistance';\nimport { CountUnit, useLengthFilter } from '../hooks/UNSAFE_useLengthFilter';\nimport { MaxLengthLiveRegion } from '../UNSAFE_TextField';\nimport { useTextAreaAutosizing } from './useTextAreaAutosizing';\nimport { Size } from '../utils/UNSAFE_size';\nimport { useCurrentValueReducer } from '../hooks/UNSAFE_useCurrentValueReducer';\nimport { ValueUpdateDetail } from '../utils/UNSAFE_valueUpdateDetail';\n\ntype PickedPropsFromTextField = Pick<ComponentProps<typeof TextField>, 'id'>;\n\ntype PickedPropsFromTextFieldTextArea = Pick<\n  ComponentProps<typeof TextFieldInput>,\n  | 'autoComplete'\n  | 'autoFocus'\n  | 'placeholder'\n  | 'isRequired'\n  | 'role'\n  | 'textAlign'\n  | 'value'\n  | 'onInput'\n  | 'onCommit'\n>;\n\ntype PickedPropsFromInlineUserAssistance = Pick<\n  ComponentProps<typeof InlineUserAssistance>,\n  | 'assistiveText'\n  | 'helpSourceLink'\n  | 'helpSourceText'\n  | 'isRequiredShown'\n  | 'messages'\n  | 'userAssistanceDensity'\n>;\n\ntype Props = PickedPropsFromTextField &\n  PickedPropsFromTextFieldTextArea &\n  PickedPropsFromInlineUserAssistance & {\n    isDisabled?: boolean;\n    isReadonly?: boolean;\n    label: string;\n    labelEdge?: 'inside' | 'start' | 'top' | 'none';\n    labelStartWidth?: Size;\n    minRows?: number;\n    maxRows?: number;\n    maxLength?: number;\n    maxLengthUnit?: CountUnit;\n    // TODO: include virtualKeyboard prop that applies type only on mobile, not on desktop\n  };\n\nexport const TextAreaAutosize = forwardRef(\n  (\n    {\n      assistiveText,\n      autoComplete = 'off',\n      autoFocus = false,\n      helpSourceLink,\n      helpSourceText,\n      id,\n      isDisabled: propIsDisabled,\n      isReadonly: propIsReadonly,\n      isRequired = false,\n      isRequiredShown,\n      label,\n      labelEdge: propLabelEdge,\n      labelStartWidth: propLabelStartWidth,\n      maxLength,\n      maxLengthUnit,\n      maxRows,\n      messages,\n      minRows = 2,\n      placeholder,\n      role,\n      //TODO: Add counter to show the length remaining - JET-50752\n      textAlign: propTextAlign,\n      userAssistanceDensity: propUserAssistanceDensity,\n      value,\n      onInput,\n      onCommit\n    }: Props,\n    ref?: Ref<FocusableHandle>\n  ) => {\n    const { currentCommitValue, dispatch } = useCurrentValueReducer({ value });\n    const onInputAndDispatch = useCallback(\n      (detail: ValueUpdateDetail<string>) => {\n        // Should dispatch happen first? This will queue up a re-render, ordering should not cause issues (this is async)\n        dispatch({ type: 'input', payload: detail.value });\n        onInput?.(detail);\n      },\n      [onInput]\n    );\n    const onCommitAndDispatch = useCallback(\n      (detail: ValueUpdateDetail<string>) => {\n        // Should dispatch happen first? This will queue up a re-render, ordering should not cause issues (this is async)\n        dispatch({ type: 'commit', payload: detail.value });\n        onCommit?.(detail);\n      },\n      [onCommit]\n    );\n    const {\n      isDisabled: isFormDisabled,\n      isReadonly: isFormReadonly,\n      labelEdge: formLabelEdge,\n      labelStartWidth: formLabelStartWidth,\n      textAlign: formTextAlign,\n      userAssistanceDensity: formUserAssistanceDensity\n    } = useFormContext();\n    // default to FormContext values if component properties are not specified\n    const isDisabled = propIsDisabled ?? isFormDisabled;\n    const isReadonly = propIsReadonly ?? isFormReadonly;\n    const labelEdge = propLabelEdge ?? formLabelEdge;\n    const labelStartWidth = propLabelStartWidth ?? formLabelStartWidth;\n    const textAlign = propTextAlign ?? formTextAlign;\n    const userAssistanceDensity = propUserAssistanceDensity ?? formUserAssistanceDensity;\n\n    const { enabledElementRef, readonlyElementRef, focusProps, isFocused } = useFocusableTextField<\n      HTMLTextAreaElement,\n      HTMLTextAreaElement\n    >({ isDisabled, isReadonly, ref });\n\n    const { formFieldContext, inputProps, labelProps, textFieldProps, userAssistanceProps } =\n      useTextField({\n        id,\n        isDisabled,\n        isFocused,\n        isReadonly,\n        labelEdge,\n        messages,\n        value,\n        variant: 'textarea'\n      });\n\n    // Handle length filter for user-typed inputs and controlled inputs\n    const { isMaxLengthExceeded, valueLength, onFilteredInput } = useLengthFilter({\n      maxLength,\n      maxLengthUnit,\n      value,\n      onInput: onInputAndDispatch,\n      onCommit: onCommitAndDispatch\n    });\n\n    const labelComp = labelEdge !== 'none' ? <Label {...labelProps}>{label}</Label> : undefined;\n\n    const fieldLabelProps = {\n      label: labelEdge !== 'none' ? labelComp : undefined,\n      labelEdge: labelEdge !== 'none' ? labelEdge : undefined,\n      labelStartWidth: labelEdge !== 'none' ? labelStartWidth : undefined\n    };\n    const ariaLabel = labelEdge === 'none' ? label : undefined;\n\n    const inlineUserAssistance =\n      isDisabled || isReadonly ? (\n        // save space for user assistance if density is 'efficient', even though we don't\n        // render user assistance for disabled or readonly fields\n        userAssistanceDensity !== 'efficient' ? undefined : (\n          <InlineUserAssistance\n            userAssistanceDensity={userAssistanceDensity}\n            {...userAssistanceProps}\n          />\n        )\n      ) : (\n        <InlineUserAssistance\n          assistiveText={assistiveText}\n          fieldLabel={label}\n          helpSourceLink={helpSourceLink}\n          helpSourceText={helpSourceText}\n          messages={messages}\n          isRequiredShown={isRequiredShown}\n          userAssistanceDensity={userAssistanceDensity}\n          {...userAssistanceProps}\n        />\n      );\n\n    useTextAreaAutosizing({\n      isReadonly,\n      enabledElementRef,\n      readonlyElementRef,\n      minRows,\n      maxRows,\n      value\n    });\n\n    if (isReadonly) {\n      // TODO: should be able to configure whether start/end content is shown when readonly\n      // JET-49916 - Preact InputText: show start/end content when readonly\n      return (\n        <FormFieldContext.Provider value={formFieldContext}>\n          <ReadonlyTextField\n            role=\"presentation\"\n            inlineUserAssistance={inlineUserAssistance}\n            variant=\"textarea\"\n            {...fieldLabelProps}>\n            <ReadonlyTextFieldInput\n              ariaLabel={ariaLabel}\n              ariaLabelledby={labelProps.id}\n              as=\"textarea\"\n              elementRef={readonlyElementRef}\n              rows={minRows}\n              autoFocus={autoFocus}\n              id={id}\n              textAlign={textAlign}\n              value={value}\n              hasInsideLabel={label !== undefined && labelEdge === 'inside'}\n            />\n          </ReadonlyTextField>\n        </FormFieldContext.Provider>\n      );\n    }\n\n    const mainContent = (\n      <Fragment>\n        <TextFieldInput\n          as=\"textarea\"\n          ariaLabel={ariaLabel}\n          autoComplete={autoComplete}\n          autoFocus={autoFocus}\n          currentCommitValue={currentCommitValue}\n          hasInsideLabel={labelComp !== undefined && labelEdge === 'inside'}\n          isRequired={isRequired}\n          inputRef={enabledElementRef}\n          onCommit={onCommitAndDispatch}\n          onInput={onFilteredInput}\n          placeholder={placeholder}\n          role={role}\n          rows={minRows}\n          textAlign={textAlign}\n          value={value}\n          {...inputProps}\n        />\n        {maxLength !== undefined && (\n          <MaxLengthLiveRegion {...{ isMaxLengthExceeded, maxLength, valueLength }} />\n        )}\n      </Fragment>\n    );\n\n    return (\n      <FormFieldContext.Provider value={formFieldContext}>\n        <TextField\n          mainContent={mainContent}\n          inlineUserAssistance={inlineUserAssistance}\n          onBlur={focusProps?.onfocusout}\n          onFocus={focusProps?.onfocusin}\n          {...textFieldProps}\n          {...fieldLabelProps}></TextField>\n      </FormFieldContext.Provider>\n    );\n  }\n);\n"],"names":["_jsx","_jsxs"],"mappings":"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"}
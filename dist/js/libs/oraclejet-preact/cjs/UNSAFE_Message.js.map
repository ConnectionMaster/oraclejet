{"version":3,"file":"UNSAFE_Message.js","sources":["../../src/UNSAFE_Message/Message.tsx","../../src/UNSAFE_Message/index.ts"],"sourcesContent":["/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\nimport { cssProps } from '@oracle/oraclejet-cssprops';\nimport { Flex } from '../UNSAFE_Flex';\nimport { classNames as cx } from '../utils/UNSAFE_classNames';\nimport { Item } from '../utils/UNSAFE_dataProvider';\nimport { ComponentChildren, Ref, VNode } from 'preact';\nimport { useCallback, useEffect, useImperativeHandle, useRef } from 'preact/hooks';\nimport { MessageSeverity } from './Message.types';\nimport { MessageCloseButton } from './MessageCloseButton';\nimport { MessageDetail, MessageTemplateItem } from './MessageDetail';\nimport { isValidValueForProp } from './MessageFormattingUtils';\nimport { MessageStartIcon } from './MessageStartIcon';\nimport { MessageSummary } from './MessageSummary';\nimport { MessageTimestamp } from './MessageTimestamp';\nimport { playSound } from './MessageUtils';\n\n/**\n * An object representing a single message in Message component.\n */\nexport type MessageItem = {\n  /**\n   * Defines whether or not to include the close icon for the message\n   */\n  closeAffordance?: 'on' | 'off';\n\n  /**\n   * Defines the detail text of the message\n   */\n  detail?: string;\n\n  /**\n   * Defines the severity of the message\n   */\n  severity?: MessageSeverity;\n\n  /**\n   * Defines the sound to be played when opening the message\n   */\n  sound?: 'default' | 'none' | string;\n\n  /**\n   * Defines the primary text of the message\n   */\n  summary?: string;\n\n  /**\n   * Defines the timestamp for the message in ISO format\n   */\n  timestamp?: string;\n};\n\n/**\n * Generates a root style class based on the severity. For invalid severity and severity=none\n * no specific style class exists.\n *\n * @param severity The message severity\n * @returns calculated style class based on the severity\n */\nfunction getSeverityStyleClass(severity: MessageSeverity) {\n  const isValidSeverity = isValidValueForProp(severity, 'severity');\n  return cx([isValidSeverity && severity !== 'none' && `oj-c-messagebanner-${severity}`]);\n}\n\n/**\n * Determines if a severity icon is needed based on the component severity\n *\n * @param severity The component severity\n * @returns Whether or not to render the severity icon\n */\nfunction isSeverityIconNeeded(\n  severity: MessageSeverity\n): severity is Exclude<MessageSeverity, 'none'> {\n  const isValidSeverity = isValidValueForProp(severity, 'severity');\n  return isValidSeverity && severity !== 'none';\n}\n\n/**\n * CSS styles for various components\n */\nconst messageStyles = {\n  base: cssProps`${{\n    backgroundColor: 'var(--oj-c-PRIVATE-DO-NOT-USE-message-banner-background-color)',\n    borderBottom: '1px solid var(--oj-c-PRIVATE-DO-NOT-USE-core-divider-color)',\n\n    '&:focus-visible': {\n      outlineStyle: 'dotted',\n      outlineWidth: '1px',\n      outlineColor: 'var(--oj-c-PRIVATE-DO-NOT-USE-core-focus-border-color)',\n      outlineOffset: '1px'\n    }\n  }}`,\n  section: cssProps`${{\n    border: '1px solid var(--oj-c-PRIVATE-DO-NOT-USE-core-divider-color)',\n    borderRadius: 'var(--oj-c-PRIVATE-DO-NOT-USE-core-border-radius-lg)'\n  }}`,\n  header: cssProps`${{\n    lineHeight: 'var(--oj-c-PRIVATE-DO-NOT-USE-message-banner-summary-line-height)',\n    boxSizing: 'border-box',\n\n    // TODO: Replace with Flex and ResponsiveProps once it is available.\n    display: 'flex',\n    flexWrap: 'wrap',\n    flexDirection: 'row',\n    '@media screen and (max-width: 599.9px)': {\n      flexDirection: 'column'\n    }\n  }}`,\n  // TODO: Replace with Flex and View components to handle padding and flex\n  content: cssProps`${{\n    boxSizing: 'border-box',\n    display: 'flex',\n    flexWrap: 'wrap',\n    paddingTop: 'var(--oj-c-PRIVATE-DO-NOT-USE-core-spacing-4x)',\n    paddingBottom: 'var(--oj-c-PRIVATE-DO-NOT-USE-core-spacing-4x)',\n    paddingInlineStart:\n      'var(--oj-c-PRIVATE-DO-NOT-USE-core-gutter-start, var(--oj-c-PRIVATE-DO-NOT-USE-core-spacing-4x))',\n    paddingInlineEnd:\n      'var(--oj-c-PRIVATE-DO-NOT-USE-core-gutter-end, var(--oj-c-PRIVATE-DO-NOT-USE-core-spacing-4x))'\n  }}`\n};\n\n/**\n * Props for the MessageHeader component\n */\ntype MessageHeaderProps = {\n  children?: ComponentChildren;\n};\n/**\n * A component that styles the header for the message component\n * @param param0 Props\n * @returns MessageHeader component instance\n */\nfunction StyledMessageHeader({ children }: MessageHeaderProps) {\n  return (\n    <div role=\"presentation\" class={messageStyles.header}>\n      {children}\n    </div>\n  );\n}\n\n/**\n * Type of the mutated Ref to allow setting focus\n */\ntype SimpleBannerMessageHandle = {\n  /**\n   * Method to set focus to the rendered message\n   */\n  focus: () => void;\n\n  /**\n   * Method to determine whether an element is inside this component\n   * @param element The candidate element\n   */\n  contains: (element?: Element | null) => boolean;\n};\n\n/**\n * Props for the Message Component\n */\ntype Props<Key, Data> = {\n  /**\n   * A ref object for holding reference to this component\n   */\n  messageRef?: Ref<SimpleBannerMessageHandle>;\n\n  /**\n   * The index of the current message instance\n   */\n  index?: number;\n\n  /**\n   * The message item with all the necessary data in it\n   */\n  item: Item<Key, Data>;\n\n  /**\n   * A Banner message can have a different look and feel. For example, when using page-level\n   * messaging the messages need to be rendered from edge to edge without any outline. On the other\n   * hand, when they are being used in a section of a page or a dialog, they need to be rendered\n   * with an outline. This attribute can be used to specify where the component is being used so that\n   * it will render the messages accordingly.\n   */\n  type?: 'page' | 'section';\n\n  /**\n   * A renderer that renders the close button in the message.\n   */\n  closeButtonRenderer?: (title: string, onAction: (event?: Event) => void) => VNode;\n\n  /**\n   * A custom renderer for rendering the detail content\n   */\n  detailRenderer?: (item: MessageTemplateItem<Key, Data>) => ComponentChildren;\n\n  /**\n   * Triggered when a user tries to close a message through UI interaction. The parent\n   * should listen to this event and remove the corresponding message item from the data\n   * which would then result in the message to be removed from the DOM. If the parent\n   * fails to remove the message item from the data, then no change will be done in the\n   * UI by the component.\n   */\n  onClose?: (item: Item<Key, Data>) => void;\n\n  /**\n   * Translations resources\n   * TODO: Replace with preact translations when it is available\n   */\n  translations?: {\n    /**\n     * Label for the message close button\n     */\n    close?: string;\n\n    /**\n     * Text for 'error' severity level\n     */\n    error?: string;\n\n    /**\n     * Text for 'warning' severity level\n     */\n    warning?: string;\n\n    /**\n     * Text for 'info' severity level\n     */\n    info?: string;\n\n    /**\n     * Text for 'confirmation' severity level\n     */\n    confirmation?: string;\n  };\n};\n\n/**\n * Component that renders an individual message\n */\nfunction Message<K extends string | number = string | number, D extends MessageItem = MessageItem>({\n  closeButtonRenderer,\n  detailRenderer,\n  index = -1,\n  item,\n  onClose,\n  messageRef = () => {},\n  translations,\n  type\n}: Props<K, D>) {\n  const { closeAffordance = 'on', severity = 'error', sound, summary, timestamp } = item.data;\n  const severityClass = getSeverityStyleClass(severity);\n  const containerDivRef = useRef<HTMLDivElement>(null);\n\n  // Add methods to the ref object\n  useImperativeHandle(messageRef, () => ({\n    focus: () => containerDivRef.current?.focus(),\n    contains: (element) => {\n      return (\n        containerDivRef.current === element ||\n        ((element && containerDivRef.current?.contains(element)) ?? false)\n      );\n    }\n  }));\n\n  /**\n   * Handles clicking on the close icon of the message\n   */\n  const handleClose = useCallback(() => {\n    onClose?.(item);\n  }, [item, onClose]);\n\n  /**\n   * Handles closing the message on pressing Esc\n   */\n  const handleCloseOnEsc = useCallback(\n    (event: KeyboardEvent) => {\n      // Close the message only when closeAffordance is on\n      if (event.key === 'Escape' && closeAffordance === 'on') {\n        onClose?.(item);\n      }\n    },\n    [closeAffordance, item, onClose]\n  );\n\n  useEffect(() => {\n    if (isValidValueForProp(sound)) {\n      // It is sufficient to check for the value to be a\n      // non-empty string. The playSound method takes care of the rest.\n      playSound(sound);\n    }\n  }, []); // No deps to run this only on mount\n\n  const rootClasses = cx([\n    messageStyles.base,\n    severityClass,\n    type === 'section' && messageStyles.section\n  ]);\n\n  // We will be animating the root div, so add padding to an inner wrapper div so that\n  // when animating height looks smooth. If padding were to be added to the root\n  // div, the animation will not be smooth as height will never reach 0 due to the\n  // padding.\n  return (\n    <div\n      ref={containerDivRef}\n      class={rootClasses}\n      role=\"alert\"\n      aria-atomic=\"true\"\n      tabIndex={0}\n      onKeyUp={handleCloseOnEsc}>\n      <div class={messageStyles.content}>\n        {isSeverityIconNeeded(severity) && (\n          <MessageStartIcon variant=\"banner\" severity={severity} translations={translations} />\n        )}\n        <Flex direction=\"column\" flex=\"1\">\n          <StyledMessageHeader>\n            <MessageSummary variant=\"banner\" text={summary} />\n            {isValidValueForProp(timestamp, 'timestamp') && (\n              <MessageTimestamp variant=\"banner\" value={timestamp!} />\n            )}\n          </StyledMessageHeader>\n          <MessageDetail variant=\"banner\" item={{ ...item, index }} renderer={detailRenderer} />\n        </Flex>\n        {closeAffordance === 'on' && (\n          <MessageCloseButton\n            buttonRenderer={closeButtonRenderer}\n            title={translations?.close}\n            variant=\"banner\"\n            onAction={handleClose}\n          />\n        )}\n      </div>\n    </div>\n  );\n}\n\nexport { Message };\n","/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\nexport { Message } from './Message';\nexport type { MessageItem } from './Message';\nexport { MessageCloseButton } from './MessageCloseButton';\nexport { MessageDetail } from './MessageDetail';\nexport type { MessageTemplateItem } from './MessageDetail';\nexport { formatTimestamp, isValidValueForProp } from './MessageFormattingUtils';\nexport { MessagesContext } from './MessagesContext';\nexport { MessagesManager } from './MessagesManager';\nexport type { MessageAnimation } from './MessagesManager';\nexport { MessageStartIcon } from './MessageStartIcon';\nexport { MessageSummary } from './MessageSummary';\nexport { MessageTimestamp } from './MessageTimestamp';\nexport {\n  getRenderer,\n  playSound,\n  throwError,\n  severityBasedStyleClass,\n  isSeverityIconNeeded\n} from './MessageUtils';\nexport type { MessageSeverity } from './Message.types';\nexport { severities } from './Message.types';\n"],"names":["getSeverityStyleClass","severity","cx","isValidSeverity","isSeverityIconNeeded","messageStyles","StyledMessageHeader","children","_jsx","Object","assign","role","class","header","Message","closeButtonRenderer","detailRenderer","index","item","onClose","messageRef","translations","type","closeAffordance","sound","summary","timestamp","data","severityClass","containerDivRef","useRef","useImperativeHandle","focus","_a","current","contains","element","_b","handleClose","useCallback","handleCloseOnEsc","event","isValidValueForProp","base","section","ref","rootClasses","tabIndex","onKeyUp","_jsxs","content","MessageStartIcon","variant","Flex","direction","flex","MessageSummary","text","MessageTimestamp","value","MessageDetail","renderer","MessageCloseButton","buttonRenderer","title","close","onAction"],"mappings":"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"}
{"version":3,"file":"UNSAFE_useTooltip.js","sources":["../../../src/hooks/UNSAFE_useTooltip/useTooltipControlled.tsx","../../../src/hooks/UNSAFE_useTooltip/useTooltip.tsx","../../../src/hooks/UNSAFE_useTooltip/index.ts"],"sourcesContent":["import { ComponentChild } from 'preact';\nimport { useState, useRef, useEffect } from 'preact/hooks';\nimport { cssProps } from '@oracle/oraclejet-cssprops';\nimport { useId } from '../UNSAFE_useId';\nimport { Floating, Offset, Placement, Coords, Rect } from '../../UNSAFE_Floating';\nimport { Layer } from '../../UNSAFE_Layer';\nimport { useHover } from '../UNSAFE_useHover';\nimport { useFocus } from '../UNSAFE_useFocus';\nimport { useTouch } from '../UNSAFE_useTouch';\nimport { mergeProps } from '../../utils/UNSAFE_mergeProps';\nimport { stringLiteralArray } from '../../utils/UNSAFE_arrayUtils';\nimport { classNames } from '../../utils/UNSAFE_classNames';\n\nexport const positions = stringLiteralArray([\n  'start',\n  'top-start',\n  'top',\n  'top-end',\n  'end',\n  'bottom-end',\n  'bottom',\n  'bottom-start'\n]);\ntype Position = typeof positions[number];\n\nexport const anchorTos = stringLiteralArray(['element', 'pointer']);\ntype AnchorTo = typeof anchorTos[number];\n\ntype AnchorModel = { x: AnchorTo; y: AnchorTo };\n\ntype Props = {\n  text?: string;\n  variant?: 'tooltip' | 'datatip';\n  isOpen: boolean;\n  position?: Position;\n  isDisabled?: boolean;\n  anchor?: AnchorModel;\n  offset?: { mainAxis?: number; crossAxis?: number };\n  onToggle?: (details: { value: boolean }) => void;\n};\n\nconst styles = {\n  wrapper: cssProps`${{\n    display: 'flex',\n    alignItems: 'flex-end',\n    overflowY: 'hidden'\n  }}`,\n  base: cssProps`${{\n    color: 'var(--oj-c-PRIVATE-DO-NOT-USE-tooltip-text-color)',\n    backgroundColor: 'var(--oj-c-PRIVATE-DO-NOT-USE-tooltip-bg-color)',\n    paddingTop: 'var(--oj-c-PRIVATE-DO-NOT-USE-tooltip-padding-vertical)',\n    paddingLeft: 'var(--oj-c-PRIVATE-DO-NOT-USE-tooltip-padding-horizontal)',\n    paddingRight: 'var(--oj-c-PRIVATE-DO-NOT-USE-tooltip-padding-horizontal)',\n    paddingBottom: 'var(--oj-c-PRIVATE-DO-NOT-USE-tooltip-padding-vertical)',\n    borderRadius: 'var(--oj-c-PRIVATE-DO-NOT-USE-tooltip-border-radius)',\n    borderColor: 'var(--oj-c-PRIVATE-DO-NOT-USE-tooltip-border-color)',\n    fontSize: 'var(--oj-c-PRIVATE-DO-NOT-USE-tooltip-font-size)',\n    borderWidth: 'var(--oj-c-PRIVATE-DO-NOT-USE-tooltip-border-width)',\n    borderStyle: 'solid'\n  }}`,\n  datatip: cssProps`${{\n    '--oj-c-PRIVATE-DO-NOT-USE-tooltip-bg-color':\n      'rgb(var(--oj-c-PRIVATE-DO-NOT-USE-palette-neutral-rgb-0))',\n    '--oj-c-PRIVATE-DO-NOT-USE-tooltip-text-color':\n      'rgb(var(--oj-c-PRIVATE-DO-NOT-USE-palette-neutral-rgb-190))',\n    '--oj-c-PRIVATE-DO-NOT-USE-tooltip-padding-vertical':\n      'var(--oj-c-PRIVATE-DO-NOT-USE-core-spacing-2x)',\n    '--oj-c-PRIVATE-DO-NOT-USE-tooltip-border-radius':\n      'var(--oj-c-PRIVATE-DO-NOT-USE-core-border-radius-md)',\n    '--oj-c-PRIVATE-DO-NOT-USE-tooltip-border-color':\n      'rgba(var(--oj-c-PRIVATE-DO-NOT-USE-palette-neutral-rgb-190), 0.65)',\n    '--oj-c-PRIVATE-DO-NOT-USE-tooltip-font-size':\n      'var(--oj-c-PRIVATE-DO-NOT-USE-typography-body-xs-font-size)'\n  }}`\n};\n\nexport const useTooltipControlled = ({\n  text,\n  isOpen = false,\n  variant = 'tooltip',\n  position = 'bottom',\n  isDisabled = false,\n  anchor = { x: 'element', y: 'element' },\n  offset = { mainAxis: 0, crossAxis: 0 },\n  onToggle\n}: Props): {\n  tooltipContent: ComponentChild;\n  tooltipProps: Record<string, any>;\n} => {\n  // TODO - consider using useReducer to potentially simplify the implementation\n  // as part of a future improvement issue.\n  const [state, setState] = useState<\n    | 'hidden'\n    | 'mountTimeout'\n    | 'mountInitialize'\n    | 'mounting'\n    | 'mounted'\n    | 'unmountTimeout'\n    | 'unmounting'\n    | 'unmounted'\n  >(isOpen ? 'mounted' : 'hidden');\n  const isDatatip = variant === 'datatip';\n  const { hoverProps, isHover } = useHover({ isDisabled });\n  const { focusProps, isFocus } = useFocus({ isDisabled });\n  const { touchProps, isTouch } = useTouch({ isDisabled }); // TODO replace by useLongPress actionhook\n  const { hoverProps: popoverHoverProps, isHover: popoverIsHover } = useHover({ isDisabled });\n  const { touchProps: popoverTouchProps, isTouch: popoverIsTouch } = useTouch({ isDisabled });\n\n  const uniqueID = useId();\n  const isInitialRender = useRef(true);\n  const popoverRef = useRef<HTMLDivElement>(null);\n  const targetRef = useRef<HTMLElement | null>(null);\n  const coordsRef = useRef<Coords>({ x: 0, y: 0 });\n  const usedRef = anchor.x === 'element' && anchor.y === 'element' ? targetRef : coordsRef;\n  const delay = isDatatip ? 0 : 250;\n\n  const handleToggle = (isOpen: boolean) => {\n    setState(isOpen ? 'mountTimeout' : 'unmountTimeout');\n  };\n\n  useEffect(() => {\n    if (isInitialRender.current) {\n      isInitialRender.current = false;\n      return;\n    }\n    // No state updates in case focus or touch is already present\n    if (isFocus || isTouch) {\n      return;\n    }\n    handleToggle(isHover);\n  }, [isHover]);\n\n  useEffect(() => {\n    if (isInitialRender.current) {\n      isInitialRender.current = false;\n      return;\n    }\n    // No state updates in case hover or touch is already present\n    if (isHover || isTouch) {\n      return;\n    }\n    handleToggle(isFocus);\n  }, [isFocus]);\n\n  useEffect(() => {\n    if (isInitialRender.current) {\n      isInitialRender.current = false;\n      return;\n    }\n    // No state updates in case hover or focus is already present\n    if (isHover || isFocus) {\n      return;\n    }\n    handleToggle(isTouch);\n  }, [isTouch]);\n\n  useEffect(() => {\n    if (isInitialRender.current) {\n      isInitialRender.current = false;\n      return;\n    }\n    if (['mounted', 'unmountTimeout'].includes(state)) {\n      setState(popoverIsHover || popoverIsTouch ? 'mounted' : 'unmountTimeout');\n    }\n  }, [popoverIsHover, popoverIsTouch]);\n\n  useEffect(() => {\n    let timeout: ReturnType<typeof setTimeout>;\n    switch (state) {\n      case 'mountTimeout':\n        timeout = setTimeout(() => setState('mountInitialize'), delay);\n        break;\n      case 'mountInitialize':\n        setState('mounting');\n        onToggle?.({ value: true });\n        break;\n      case 'mounting':\n        setState('mounted');\n        break;\n      case 'unmountTimeout':\n        timeout = setTimeout(() => setState('unmounting'), delay);\n        break;\n      case 'unmounting':\n        setState('unmounted');\n        onToggle?.({ value: false });\n        break;\n    }\n    return () => clearTimeout(timeout);\n  }, [state]);\n\n  let actionableProps;\n  if (isDisabled) {\n    actionableProps = {};\n  } else {\n    const anchorInitProps = {\n      'aria-describedby': uniqueID,\n      onMouseEnter: (event: MouseEvent) => {\n        if (event.eventPhase === Event.AT_TARGET) {\n          targetRef.current = event.target as HTMLElement;\n        }\n      },\n      ...((anchor.x === 'pointer' || anchor.y === 'pointer') && {\n        onMouseMove: (event: MouseEvent) => {\n          if (event.eventPhase === Event.AT_TARGET) {\n            handleMouseMove(event);\n          }\n        }\n      }),\n      onFocus: (event: FocusEvent) => {\n        if (event.eventPhase === Event.AT_TARGET) {\n          targetRef.current = event.target as HTMLElement;\n        }\n      }\n    };\n    actionableProps = mergeProps(hoverProps, focusProps, touchProps, anchorInitProps);\n  }\n\n  // No need to process tooltip if disabled or no text is provided\n  // Include actionableProps to detect mouseenter in components\n  // hovered state won't update unless actionableProps are already present in the component when mouse enters\n  if (isDisabled || !text) {\n    return {\n      tooltipContent: null,\n      tooltipProps: actionableProps\n    };\n  }\n\n  // TODO JET-51708 useFloating.ts deepEqual compares function using toString method.\n  // We want it to evaluate false on each rerender so that we get the updated offset value.\n  const offsetFunctionLeft = ({ floating }: { floating: Rect }) => ({\n    mainAxis: offset?.mainAxis,\n    crossAxis: -floating.width - (offset.crossAxis || 0)\n  });\n  const offsetFunctionRight = ({ floating }: { floating: Rect }) => ({\n    mainAxis: offset?.mainAxis,\n    crossAxis: floating.width + (offset.crossAxis || 0)\n  });\n\n  const POSITIONS: {\n    [K in Position]: { placement: Placement; offsetValue: Offset };\n  } = {\n    top: {\n      placement: 'top',\n      offsetValue: offset\n    },\n    'top-end': {\n      placement: 'top-end',\n      offsetValue: offsetFunctionRight\n    },\n    end: {\n      placement: 'right',\n      offsetValue: offset\n    },\n    'bottom-end': {\n      placement: 'bottom-end',\n      offsetValue: offsetFunctionRight\n    },\n    bottom: {\n      placement: 'bottom',\n      offsetValue: offset\n    },\n    'bottom-start': {\n      placement: 'bottom-start',\n      offsetValue: offsetFunctionLeft\n    },\n    start: {\n      placement: 'left',\n      offsetValue: offset\n    },\n    'top-start': {\n      placement: 'top-start',\n      offsetValue: offsetFunctionLeft\n    }\n  };\n  const placements = POSITIONS[position];\n\n  const isHidden = state === 'hidden' || state === 'mountTimeout';\n  const popoverNode = popoverRef.current;\n  const transitionStyles = {\n    popoverOpacity: ['mounted', 'unmountTimeout'].includes(state)\n      ? isDatatip\n        ? '100%'\n        : '95%'\n      : '0%',\n    wrapperHeight: !isHidden && popoverNode ? `${popoverNode?.offsetHeight}px` : 'auto', // offsetHeight to include datatip border\n    popoverHeight:\n      state === 'mountInitialize'\n        ? 'none'\n        : ['mounted', 'unmountTimeout'].includes(state) && popoverNode\n        ? `${popoverNode?.offsetHeight}px`\n        : '0'\n  };\n\n  let mouseMoveTimeout: ReturnType<typeof setTimeout>;\n\n  const handleMouseMove = (event: MouseEvent) => {\n    clearTimeout(mouseMoveTimeout);\n    if (anchor.x === 'pointer' && anchor.y === 'pointer') {\n      // Display tooltip at the mouse position if both anchors are set to pointer\n      coordsRef.current = { x: event.clientX, y: event.clientY };\n      setState(state === 'mounted' ? 'mounting' : 'mounted');\n    } else if (anchor.x === 'pointer') {\n      // Tooltip maintains static offset from top side of the window\n      // if X anchor is set to 'pointer'\n      mouseMoveTimeout = setTimeout(() => {\n        const childrenY = targetRef?.current?.offsetHeight || 0;\n        const childrenTop = targetRef?.current?.offsetTop || 0;\n        const distance = childrenTop + childrenY;\n        coordsRef.current = { x: event.clientX, y: distance };\n        onToggle?.({ value: true });\n      }, delay);\n    } else if (anchor.y === 'pointer') {\n      // Tooltip maintains static offset from left side of window\n      // if Y anchor is set to 'pointer'\n      mouseMoveTimeout = setTimeout(() => {\n        const childrenX = targetRef?.current?.offsetWidth || 0;\n        const childrenLeft = targetRef?.current?.offsetLeft || 0;\n        const distance = childrenLeft + childrenX;\n        coordsRef.current = { x: distance, y: event.clientY };\n        onToggle?.({ value: true });\n      }, delay);\n    }\n  };\n\n  const handleTransitionEnd = (_: TransitionEvent) => {\n    if (state === 'mounting') {\n      setState('mounted');\n    }\n    if (state === 'unmounted') {\n      setState('hidden');\n    }\n  };\n\n  const renderContent = (\n    <Layer>\n      <Floating\n        anchorRef={usedRef}\n        placement={placements.placement}\n        offsetValue={placements.offsetValue}>\n        <div\n          id={uniqueID}\n          role=\"tooltip\"\n          {...popoverHoverProps}\n          {...popoverTouchProps}\n          class={styles.wrapper}\n          style={{\n            height: transitionStyles.wrapperHeight\n          }}>\n          <div\n            style={{\n              opacity: transitionStyles.popoverOpacity,\n              maxHeight: transitionStyles.popoverHeight,\n              transition:\n                'max-height 0.1s cubic-bezier(0.0, 0.0, 0.2, 1), opacity 0.1s cubic-bezier(0.0, 0.0, 0.2, 1)'\n            }}\n            onTransitionEnd={handleTransitionEnd}>\n            <div\n              ref={popoverRef}\n              class={classNames([styles.base, isDatatip ? styles[variant] : ''])}>\n              {text}\n            </div>\n          </div>\n        </div>\n      </Floating>\n    </Layer>\n  );\n\n  return {\n    tooltipContent: !isHidden && renderContent,\n    tooltipProps: actionableProps\n  };\n};\n","import { useState } from 'preact/hooks';\nimport { useTooltipControlled } from './useTooltipControlled';\n\ntype tooltipParameters = Parameters<typeof useTooltipControlled>[0];\n\ntype Props = {\n  text?: string;\n  position?: tooltipParameters['position'];\n  isDisabled?: boolean;\n  anchor?: tooltipParameters['anchor'];\n  offset?: { mainAxis?: number; crossAxis?: number };\n};\n\nexport const useTooltip = ({\n  text,\n  position = 'bottom',\n  isDisabled = false,\n  anchor = { x: 'element', y: 'element' },\n  offset = { mainAxis: 0, crossAxis: 0 }\n}: Props): ReturnType<typeof useTooltipControlled> => {\n  const [isOpen, setIsOpen] = useState<boolean>(false);\n  const disabled = isDisabled || !text;\n  const { tooltipContent, tooltipProps } = useTooltipControlled({\n    text,\n    isOpen,\n    position,\n    isDisabled: disabled,\n    offset,\n    anchor,\n    onToggle: ({ value }) => setIsOpen(value)\n  });\n\n  return {\n    tooltipContent,\n    tooltipProps\n  };\n};\n","/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\nexport { useTooltip } from './useTooltip';\nexport { useTooltipControlled } from './useTooltipControlled';\n"],"names":["positions","stringLiteralArray","anchorTos","styles","useTooltipControlled","text","isOpen","variant","position","isDisabled","anchor","x","y","offset","mainAxis","crossAxis","onToggle","state","setState","useState","isDatatip","hoverProps","isHover","useHover","focusProps","isFocus","useFocus","touchProps","isTouch","useTouch","popoverHoverProps","popoverIsHover","popoverTouchProps","popoverIsTouch","uniqueID","useId","isInitialRender","useRef","popoverRef","targetRef","coordsRef","handleToggle","current","timeout","setTimeout","delay","clearTimeout","actionableProps","event","eventPhase","Event","AT_TARGET","target","onMouseMove","onFocus","tooltipContent","tooltipProps","floating","width","POSITIONS","top","placement","offsetValue","offsetFunctionRight","end","bottom","offsetFunctionLeft","start","placements","popoverNode","transitionStyles","includes","mouseMoveTimeout","handleMouseMove","clientX","clientY","childrenY","_a","offsetHeight","childrenTop","_b","offsetTop","distance","childrenX","offsetWidth","childrenLeft","offsetLeft","handleTransitionEnd","_","transition","onTransitionEnd","children","_jsx","Object","assign","ref","class","classNames","base","isHidden","renderContent"],"mappings":"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"}
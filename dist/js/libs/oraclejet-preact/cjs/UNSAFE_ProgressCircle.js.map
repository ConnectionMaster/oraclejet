{"version":3,"file":"UNSAFE_ProgressCircle.js","sources":["../../src/UNSAFE_ProgressCircle/ProgressCircle.tsx"],"sourcesContent":["/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * Licensed under The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\nimport { JSX } from 'preact';\nimport { classNames } from '../utils/UNSAFE_classNames';\nimport { cssProps } from '@oracle/oraclejet-cssprops';\nimport { useTranslationBundle } from '../hooks/UNSAFE_useTranslationBundle';\nimport type { BundleType } from '../resources/nls/bundle';\n\ntype IntrinsicProps = Pick<JSX.HTMLAttributes<HTMLDivElement>, 'id' | 'class' | 'children'>;\n\ntype Props = IntrinsicProps & {\n  /**\n   * Specifies the id of the progress circle.  If the progress circle is being used to describe the loading process of a particular region\n   * of the page, then the aria-describedby attribute of the region must point to the id of the ProgressCircle\n   */\n  id?: IntrinsicProps['id'];\n  /**\n   * The value of the progress circle.  If the value is 'indeterminate', an indeterminate progress circle will be shown.\n   */\n  value?: 'indeterminate' | number;\n\n  /**\n   * The maximum value of the progress circle.\n   */\n  max?: number;\n  /**\n   * The size of the progress circle.\n   */\n  size?: 'sm' | 'md' | 'lg';\n\n  /**\n   * A label to be used for accessibility purposes when value is set to 'indeterminate'.\n   */\n  accessibleLabel?: string;\n};\n\nexport function ProgressCircle({ value, max, ...otherProps }: Props) {\n  return value === 'indeterminate' ? (\n    <IndeterminateProgressCircle {...otherProps}></IndeterminateProgressCircle>\n  ) : (\n    <DeterminateProgressCircle value={value} max={max} {...otherProps}></DeterminateProgressCircle>\n  );\n}\n\ntype IndeterminateProps = Omit<Props, 'value' | 'max'>;\n\nconst IndeterminateProgressCircle = ({ accessibleLabel, id, size = 'md' }: IndeterminateProps) => {\n  const baseClasses = classNames([\n    styles.base,\n    `oj-c-progress-circle-${size}`,\n    styles.indeterminateOuter\n  ]);\n  const translations = useTranslationBundle<BundleType>('@oracle/oraclejet-preact');\n  return (\n    <CircleWrapper\n      id={id}\n      ariaValuetext={accessibleLabel || translations.progressIndeterminate()}\n      class={baseClasses}>\n      <CircleInner class={styles.indeterminateInner} />\n    </CircleWrapper>\n  );\n};\n\ntype DeterminateProps = Omit<Props, 'accessibleLabel'> & {\n  value?: number;\n};\n\nconst DeterminateProgressCircle = ({ value = 0, max = 100, id, size = 'md' }: DeterminateProps) => {\n  const percentage = Math.min(Math.max(0, value / max), 1);\n  const baseClasses = classNames([styles.base, `oj-c-progress-circle-${size}`]);\n  const clipPath = _getClipPath(percentage);\n\n  return (\n    <CircleWrapper id={id} max={max} value={value} class={baseClasses}>\n      <CircleInner class={classNames([styles.determinateInner, styles.track])} />\n      <CircleInner\n        class={classNames([styles.determinateInner, styles.value])}\n        clipPath={clipPath}\n      />\n    </CircleWrapper>\n  );\n};\n\ntype WrapperProps = IntrinsicProps & {\n  value?: number;\n  max?: number;\n  min?: number;\n  color?: string;\n  ariaValuetext?: string;\n};\nconst CircleWrapper = ({\n  value,\n  max,\n  min,\n  id,\n  children,\n  ariaValuetext,\n  color,\n  ...otherProps\n}: WrapperProps) => {\n  const ariaMin = value != null ? (min ? min : '0') : null;\n  const ariaMax = value != null ? max : null;\n  const ariaNow = value != null ? value : null;\n  return (\n    <div\n      role=\"progressbar\"\n      id={id}\n      aria-valuemin={ariaMin}\n      aria-valuemax={ariaMax}\n      aria-valuenow={ariaNow}\n      aria-valuetext={ariaValuetext}\n      class={otherProps.class}\n      style={{ borderColor: color }}>\n      {children}\n    </div>\n  );\n};\n\ntype CircleInnerProps = Pick<IntrinsicProps, 'class'> & {\n  clipPath?: string;\n  color?: string;\n};\n\nconst CircleInner = ({ clipPath, color, ...otherProps }: CircleInnerProps) => {\n  return <div class={otherProps.class} style={{ clipPath: clipPath, borderColor: color }}></div>;\n};\n\nconst styles = {\n  base: cssProps`${{\n    position: 'relative',\n    overflowX: 'hidden',\n    overflowY: 'hidden',\n    display: 'inline-block',\n    maxWidth: '100%',\n    maxHeight: '100%',\n    width: 'var(--oj-c-PRIVATE-DO-NOT-USE-progress-circle-size)',\n    height: 'var(--oj-c-PRIVATE-DO-NOT-USE-progress-circle-size)'\n  }}`,\n  indeterminateOuter: cssProps`${{\n    animationName: 'var(--oj-c-PRIVATE-DO-NOT-USE-private-progress-circle-rotation-animation)',\n    animationDuration: '1s',\n    animationTimingFunction: 'linear',\n    animationIterationCount: 'infinite'\n  }}`,\n  indeterminateInner: cssProps`${{\n    borderWidth: 'var(--oj-c-PRIVATE-DO-NOT-USE-progress-circle-track-width)',\n    borderColor: 'var(--oj-c-PRIVATE-DO-NOT-USE-progress-circle-value-bg-color)',\n    borderStyle: 'solid',\n    width: '100%',\n    height: '100%',\n    boxSizing: 'border-box',\n    borderRadius: '50%',\n    animationName: 'var(--oj-c-PRIVATE-DO-NOT-USE-private-progress-circle-length-animation)',\n    animationDuration: '1.5s',\n    animationTimingFunction: 'linear',\n    animationIterationCount: 'infinite',\n    animationDirection: 'alternate',\n    position: 'absolute'\n  }}`,\n  determinateInner: cssProps`${{\n    borderWidth: 'var(--oj-c-PRIVATE-DO-NOT-USE-progress-circle-track-width)',\n    width: '100%',\n    height: '100%',\n    boxSizing: 'border-box',\n    borderRadius: '50%',\n    position: 'absolute',\n    borderStyle: 'solid'\n  }}`,\n  track: cssProps`${{\n    borderColor: 'var(--oj-c-PRIVATE-DO-NOT-USE-progress-circle-determinate-track-bg-color)'\n  }}`,\n  value: cssProps`${{\n    borderColor: 'var(--oj-c-PRIVATE-DO-NOT-USE-progress-circle-value-bg-color)'\n  }}`\n};\n\nfunction _getClipPath(percentage: number) {\n  let tangent;\n  if (percentage < 0.125) {\n    tangent = _calculateTangent(percentage) + 50;\n    return `polygon(50% 0, ${tangent}% 0, 50% 50%)`;\n  } else if (percentage < 0.375) {\n    if (percentage < 0.25) {\n      tangent = 50 - _calculateTangent(0.25 - percentage);\n    } else {\n      tangent = _calculateTangent(percentage - 0.25) + 50;\n    }\n    return `polygon(50% 0, 100% 0, 100% ${tangent}%, 50% 50%)`;\n  } else if (percentage < 0.625) {\n    if (percentage < 0.5) {\n      tangent = 50 + _calculateTangent(0.5 - percentage);\n    } else {\n      tangent = 50 - _calculateTangent(percentage - 0.5);\n    }\n    return `polygon(50% 0, 100% 0, 100% 100%, ${tangent}% 100%, 50% 50%)`;\n  } else if (percentage < 0.875) {\n    if (percentage < 0.75) {\n      tangent = 50 + _calculateTangent(0.75 - percentage);\n    } else {\n      tangent = 50 - _calculateTangent(percentage - 0.75);\n    }\n    return `polygon(50% 0, 100% 0, 100% 100%, 0% 100%, 0% ${tangent}%, 50% 50%)`;\n  }\n  tangent = 50 - _calculateTangent(1 - percentage);\n  return `polygon(50% 0, 100% 0, 100% 100%, 0% 100%, 0% 0%, ${tangent}% 0%, 50% 50%)`;\n}\n\nfunction _calculateTangent(percentage: number) {\n  return 50 * Math.tan(percentage * 2 * Math.PI);\n}\n"],"names":["ProgressCircle","_a","value","_jsx","IndeterminateProgressCircle","Object","assign","otherProps","DeterminateProgressCircle","max","accessibleLabel","id","size","styles","base","indeterminateOuter","translations","useTranslationBundle","CircleWrapper","ariaValuetext","progressIndeterminate","class","baseClasses","children","CircleInner","indeterminateInner","percentage","Math","min","classNames","clipPath","_getClipPath","_jsxs","determinateInner","track","color","__rest","ariaMax","ariaNow","role","ariaMin","style","borderColor","tangent","_calculateTangent","tan","PI"],"mappings":"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"}
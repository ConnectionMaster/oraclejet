{"version":3,"file":"MessagesManager-e88df2a4.js","sources":["../../src/UNSAFE_Message/MessagesContext.ts","../../src/UNSAFE_Message/MessagesManager.tsx"],"sourcesContent":["/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\n\nimport { createContext } from 'preact';\nimport { useContext } from 'preact/hooks';\n\n/**\n * Messages Context\n */\ntype MessagesContextProps = {\n  /**\n   * An optional function that adds busy state to the root element\n   */\n  addBusyState?: (description?: string) => () => void;\n};\n\n/**\n * Context which the parent custom element components can use for passing down\n * the busy context\n */\nconst MessagesContext = createContext<MessagesContextProps>({});\n\n/**\n * Uses the MessagesContext if one is available.\n *\n * @returns The context from the closes provider\n */\nfunction useMessagesContext() {\n  return useContext(MessagesContext);\n}\n\nexport { MessagesContext, useMessagesContext };\n","/**\n * @license\n * Copyright (c) %FIRST_YEAR% %CURRENT_YEAR%, Oracle and/or its affiliates.\n * The Universal Permissive License (UPL), Version 1.0\n * as shown at https://oss.oracle.com/licenses/upl/\n * @ignore\n */\nimport { ComponentChild, Fragment } from 'preact';\nimport { useCallback } from 'preact/hooks';\nimport { Transition, TransitionGroup } from '../UNSAFE_TransitionGroup';\nimport { Item } from '../utils/UNSAFE_dataProvider';\nimport { useMessagesContext } from './MessagesContext';\n\n/**\n * A type that defines animation configuration\n */\ntype MessageAnimation = {\n  effect?: string;\n  duration?: string | number;\n  direction?: string;\n};\n\n/**\n * Transition states for animations\n */\ntype TransitionState = 'enter' | 'exit';\n\n/**\n * Metadata passed on to the Transition component\n */\ntype TransitionMetadata<K> = {\n  index: number;\n  key: K;\n};\n\n/**\n * Type of the render context passed on to render individual message\n */\ntype MessageRenderContext<Key, Data> = {\n  /**\n   * The index of the current message\n   */\n  index: number;\n\n  /**\n   * The message item with all the necessary data in it\n   */\n  item: Item<Key, Data>;\n};\n\n// Type of startAnimation property\ntype StartAnimType = (\n  element: Element,\n  action: string,\n  effects: string | object | (string | object)[],\n  component?: object\n) => Promise<unknown>;\n\n/**\n * Props for the Message Component\n */\ntype Props<Key, Data> = {\n  /**\n   * An object of various animation effects for the transitions.\n   */\n  animations?: Record<string, MessageAnimation[]>;\n\n  /**\n   * A render function that renders individual child.\n   */\n  children?: (context: MessageRenderContext<Key, Data>) => ComponentChild;\n\n  /**\n   * Data for the messages. This data is used for rendering each message.\n   */\n  data: Item<Key, Data>[];\n\n  /**\n   * Method for starting an animation.\n   */\n  startAnimation?: StartAnimType;\n\n  /**\n   * A callback function that gets called before a message is removed\n   */\n  onMessageWillRemove?: (key: Key, index: number, node?: Element) => void;\n};\n\n/**\n * The component that renders individual messages for the provided data.\n */\nfunction MessagesManager<K extends string | number = string | number, D = any>(props: Props<K, D>) {\n  const { children, data } = props;\n  const { handleEntering, handleExiting } = useMessagesManager(props);\n\n  return (\n    <TransitionGroup elementType={Fragment}>\n      {data.map((item, index) => (\n        <Transition\n          key={item.key}\n          metadata={{ index, key: item.key }}\n          onEntering={handleEntering}\n          onExiting={handleExiting}>\n          {children?.({ index, item })}\n        </Transition>\n      ))}\n    </TransitionGroup>\n  );\n}\n\n/**\n * A custom hook for creating the listeners for the MessagesManager\n *\n * @param param0 The props for the messages\n * @returns The transition listeners\n */\nfunction useMessagesManager<K, D>({\n  animations,\n  startAnimation = () => Promise.resolve(false),\n  onMessageWillRemove\n}: Props<K, D>) {\n  const { addBusyState } = useMessagesContext();\n\n  /**\n   * Adds busy state if available in the context\n   *\n   * @param description The description of the busyState\n   * @returns The busyState resolver\n   */\n  const _addBusyState = useCallback(\n    (description: string) => {\n      return addBusyState?.(description) ?? (() => {});\n    },\n    [addBusyState]\n  );\n\n  /**\n   * Performs animation.\n   *\n   * @param type The type of the animation\n   * @param base The root DOM element\n   */\n  const performAnimation = useCallback(\n    async (type: TransitionState, base?: Element) => {\n      if (!base) {\n        return;\n      }\n\n      const animation = animations?.[type];\n      if (animation) {\n        const busyStateResolver = _addBusyState(`performing message animation - ${type}`);\n        // If an animation is provided for the current transition, perform the animation\n        await startAnimation(base, type, animation);\n        busyStateResolver();\n      }\n    },\n    [animations, startAnimation, _addBusyState]\n  );\n\n  /**\n   * Handles when a message is successfully entered.\n   *\n   * @param node The corresponding message element\n   * @param callback A callback function to be called after the animation is complete\n   */\n  const handleEntering = useCallback(\n    async (node?: Element, callback?: () => void) => {\n      await performAnimation('enter', node);\n      callback?.();\n    },\n    [performAnimation]\n  );\n\n  /**\n   * Handles when a message has started to exit.\n   *\n   * @param node The corresponding message element\n   * @param callback A callback function to be called after the animation is complete\n   */\n  const handleExiting = useCallback(\n    async (node?: Element, callback?: () => void, metadata?: TransitionMetadata<K>) => {\n      await performAnimation('exit', node);\n      metadata && onMessageWillRemove?.(metadata.key, metadata.index, node);\n      callback?.();\n    },\n    [performAnimation, onMessageWillRemove]\n  );\n\n  return { handleEntering, handleExiting };\n}\n\nexport { MessageAnimation, MessagesManager };\n"],"names":["createContext","useContext","_jsx","TransitionGroup","Fragment","Transition","useCallback"],"mappings":"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"}